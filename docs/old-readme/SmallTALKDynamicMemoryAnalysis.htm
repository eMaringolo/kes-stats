<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0077)http://www-4.ibm.com/software/ad/smalltalk/discussion/2000/april/dev0400.html -->
<HTML><HEAD><TITLE>IBM VisualAge Smalltalk > SmallTALK</TITLE>
<META content="Dana Gillihan" name=owner>
<META content=20010703 name=review>
<META content=Public name=security><!--Each time you update this page, change the date on the next line-->
<META content=20000103 name=updated>
<META content="VisualAge Smalltalk Version 5.0 Enterprise object-oriented" 
name=keywords>
<META content="Special topics of interest related to VA Smalltalk." 
name=description>
<META content="MSHTML 5.50.4134.600" name=GENERATOR><!--*************************************************************************--><!--MASTHEAD--><!--#include virtual="/software/main/inc/warning.inc" -->
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<STYLE type=text/css>.input {
	FONT-WEIGHT: normal; BACKGROUND: #ffffcc; COLOR: #000000
}
A.nav:link {
	COLOR: #000000; TEXT-DECORATION: none
}
A.nav:visited {
	COLOR: #000000; TEXT-DECORATION: none
}
A.nav:hover {
	COLOR: #000000; TEXT-DECORATION: underline
}
</STYLE>

<SCRIPT language=JavaScript>

<!--

b = navigator.appName

b4 = ((b=="Netscape"||b=="Microsoft Internet Explorer") && parseInt(navigator.appVersion)>=4 && navigator.platform=="Win32")

remstart = "<!--"

remend = "//-->"

function redirect(select) {

var page = select.options[select.selectedIndex].value

if (page!="#") document.location.href = page

}
self.name = "oldwindow";
function checkInput(form)
{
var TheURL="/software/main/search/message.html";
var sel;
var selected;
if (form.realm.type == "hidden")
{
selected = form.realm.value;
}
else
{
sel = form.realm.selectedIndex;
selected = form.realm.options[sel].value;
}
if ((form.q.value == "") && (selected == "software"))
{
if (b=="Netscape")
{
zview=window.open(TheURL,"view","toolbar=no,menubar=no,scrollbars=no,resizable=yes,width=315,height=345");
}
else 
{
zview=window.open(TheURL,"view","toolbar=no,menubar=no,scrollbars=no,resizable=yes,width=315,height=370");		
}
zview.creator=self;
}
else
{
form.submit();
}
return true;
}
//-->
</SCRIPT>
</HEAD>
<BODY vLink=#996699 aLink=#6699cc link=#006699 bgColor=#ffffff leftMargin=2 
topMargin=2 marginwidth="2" marginheight="2">
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR bgColor=#006699>
    <TD>
      <TABLE cellSpacing=0 cellPadding=0 width=300 border=0>
        <TBODY>
        <TR bgColor=#006699>
          <TD width=150><IMG height=47 alt=IBM 
            src="SmallTALKMemoryAnalysis_files/mast_logo.gif" width=150></TD>
          <TD width=150 
            background=SmallTALKMemoryAnalysis_files/mgradient.gif><FONT 
            face="Verdana, sans-serif" color=#99ccff 
            size=-2><B><!--Country--></B></FONT><BR><A 
            href="http://www-4.ibm.com/software/ad/smalltalk/discussion/2000/april/dev0400.html#navskip"><IMG 
            height=1 alt="skip to main content" 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=150 
        border=0></A></TD></TR></TBODY></TABLE></TD>
    <TD align=left>
      <TABLE cellSpacing=0 cellPadding=0 width=300 border=0>
        <TBODY>
        <TR>
          <TD width=100><A href="http://www.ibm.com/shop1/"><IMG height=47 
            alt=Shop src="SmallTALKMemoryAnalysis_files/shop_0.gif" width=100 
            border=0></A></TD>
          <TD width=100><A href="http://www.ibm.com/support/"><IMG height=47 
            alt=Support src="SmallTALKMemoryAnalysis_files/support_0.gif" 
            width=100 border=0></A></TD>
          <TD width=100><A href="http://www.ibm.com/download/"><IMG height=47 
            alt=Downloads src="SmallTALKMemoryAnalysis_files/download_0.gif" 
            width=100 border=0></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR bgColor=#000000>
    <TD>
      <TABLE cellSpacing=0 cellPadding=0 width=600 border=0>
        <TBODY>
        <TR>
          <TD width=150 bgColor=#006699><IMG height=21 alt="" 
            src="SmallTALKMemoryAnalysis_files/mast_lnav_sp.gif" width=150 
            border=0></TD>
          <TD bgColor=#000000 colSpan=4>
            <TABLE height=21 cellSpacing=0 cellPadding=0 border=0>
              <TBODY>
              <TR>
                <TD align=middle width=59 bgColor=#000000 height=21><A 
                  class=nav style="COLOR: #ffffff" 
                  href="http://www.ibm.com/home/"><FONT 
                  face="Verdana, sans-serif" color=#ffffff 
                  size=-2><B>Home</B></FONT></A></TD>
                <TD width=1 bgColor=#959595><IMG height=1 alt="" 
                  src="SmallTALKMemoryAnalysis_files/c.gif" width=1 border=0></TD>
                <TD align=middle width=76 bgColor=#000000 height=21><A 
                  class=nav style="COLOR: #ffffff" 
                  href="http://www.ibm.com/products/"><FONT 
                  face="Verdana, sans-serif" color=#ffffff 
                  size=-2><B>Products</B></FONT></A></TD>
                <TD width=1 bgColor=#959595><IMG height=1 alt="" 
                  src="SmallTALKMemoryAnalysis_files/c.gif" width=1 border=0></TD>
                <TD align=middle width=86 bgColor=#000000 height=21><A 
                  class=nav style="COLOR: #ffffff" 
                  href="http://www.ibm.com/services/"><FONT 
                  face="Verdana, sans-serif" color=#ffffff 
                  size=-2><B>Consulting</B></FONT></A></TD>
                <TD width=1 bgColor=#959595><IMG height=1 alt="" 
                  src="SmallTALKMemoryAnalysis_files/c.gif" width=1 border=0></TD>
                <TD align=middle width=84 bgColor=#000000 height=21><A 
                  class=nav style="COLOR: #ffffff" 
                  href="http://www.ibm.com/solutions/"><FONT 
                  face="Verdana, sans-serif" color=#ffffff 
                  size=-2><B>Industries</B></FONT></A></TD>
                <TD width=1 bgColor=#959595><IMG height=1 alt="" 
                  src="SmallTALKMemoryAnalysis_files/c.gif" width=1 border=0></TD>
                <TD align=middle width=57 bgColor=#000000 height=21><A 
                  class=nav style="COLOR: #ffffff" 
                  href="http://www.ibm.com/news/"><FONT 
                  face="Verdana, sans-serif" color=#ffffff 
                  size=-2><B>News</B></FONT></A></TD>
                <TD width=1 bgColor=#959595><IMG height=1 alt="" 
                  src="SmallTALKMemoryAnalysis_files/c.gif" width=1 border=0></TD>
                <TD align=middle width=84 bgColor=#000000 height=21><A 
                  class=nav style="COLOR: #ffffff" 
                  href="http://www.ibm.com/ibm/"><FONT 
                  face="Verdana, sans-serif" color=#ffffff size=-2><B>About 
                  IBM</B></FONT></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><!--#include virtual="/software/main/inc/warning.inc" -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR vAlign=top>
    <TD width=150 bgColor=#6699cc>
      <TABLE cellSpacing=0 cellPadding=0 width=150 border=0>
        <TBODY>
        <TR bgColor=#000000>
          <TD width=8><IMG height=21 alt="" 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD>
          <TD width=142 colSpan=2><B><FONT face="Verdana, sans-serif" 
            color=#ffffff size=-2>Search</FONT></B></TD>
          <FORM onsubmit="checkInput(this); return false;" 
          action=/cgi-bin/software/searchv10.pl method=get><INPUT type=hidden 
          value=10 name=v><INPUT type=hidden value=en name=lang><INPUT 
          type=hidden value=us name=cc></TR>
        <TR bgColor=#6699cc>
          <TD width=8 height=24>&nbsp;</TD>
          <TD vAlign=center width=134 height=24><FONT face="Arial, sans-serif" 
            size=-2><IMG height=3 alt="" 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1><BR><INPUT 
            class=input maxLength=100 size=15 name=q><BR><IMG height=3 alt="" 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></FONT></TD>
          <TD width=8 height=24>&nbsp;</TD></TR>
        <TR bgColor=#6699cc>
          <TD width=8 height=24>&nbsp;</TD>
          <TD noWrap height=24>
            <TABLE cellSpacing=0 cellPadding=0 border=0>
              <TBODY>
              <TR vAlign=center>
                <TD><FONT face="Arial, sans-serif" size=-2><SELECT class=input 
                  name=realm><OPTION value=ibm>All IBM</OPTION><OPTION 
                    value=software selected>IBM Software</OPTION><OPTION 
                    value=Support>Support</OPTION><OPTION 
                    value=Downloads>Downloads</OPTION></SELECT><BR><IMG height=9 
                  alt="" src="SmallTALKMemoryAnalysis_files/c.gif" 
                  width=1></FONT></TD>
                <TD>&nbsp;</TD>
                <TD><INPUT type=image height=23 alt=Go width=24 
                  src="SmallTALKMemoryAnalysis_files/go_butt.gif" border=0 
                  name=Go></TD></TR></TBODY></TABLE></TD>
          <TD width=8 height=24>&nbsp;</TD></TR></FORM>
        <TR>
          <TD bgColor=#000000 colSpan=3><IMG height=1 alt="" 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1 
        border=0></TD></TR></TBODY></TABLE><!--#include virtual="/software/main/inc/warning.inc" --><!--*************************************************************************--><!--Left NAVIGATION-->
      <TABLE cellSpacing=0 cellPadding=0 width=150 border=0>
        <TBODY>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff><IMG height=7 
            src="SmallTALKMemoryAnalysis_files/ra_cl.gif" width=7 border=0></TD>
          <TD width=127 bgColor=#99ccff height=21><A class=nav 
            style="COLOR: #000000" href="http://www-4.ibm.com/software/"><FONT 
            face="Arial, sans-serif" color=#000000 
size=-2>Software</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff><IMG height=7 
            src="SmallTALKMemoryAnalysis_files/ra_cl.gif" width=7 border=0></TD>
          <TD width=127 bgColor=#99ccff height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/"><FONT 
            face="Arial, sans-serif" color=#000000 size=-2>Application 
            Development</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD width=134 bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/"><FONT 
            face="Arial, sans-serif" color=#000000 size=-1><B>VisualAge 
            Smalltalk</B></FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www2.software.ibm.com/prodindex/prodindex.nsf/H2BPages/TDUN-49EW2T?opendocument"><FONT 
            face="Arial, sans-serif" color=#000000 size=-1>How to 
          buy</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/support/"><FONT 
            face="Arial, sans-serif" color=#000000 size=-1>Support</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/downloads/"><FONT 
            face="Arial, sans-serif" color=#000000 
size=-1>Download</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/about/"><FONT 
            face="Arial, sans-serif" color=#000000 size=-1>More information 
            </FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/news/"><FONT 
            face="Arial, sans-serif" color=#000000 size=-1>News</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/casestudies/"><FONT 
            face="Arial, sans-serif" color=#000000 size=-1>Case 
            studies</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/library/"><FONT 
            face="Arial, sans-serif" color=#000000 size=-1>Library</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/solutions/"><FONT 
            face="Arial, sans-serif" color=#000000 
size=-1>Services</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/events/"><FONT 
            face="Arial, sans-serif" color=#000000 size=-1>Events</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR bgColor=#ccffff>
          <TD colSpan=4 height=1><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD>
          <TD bgColor=#99ccff colSpan=2 height=21><A class=nav 
            style="COLOR: #000000" 
            href="http://www-4.ibm.com/software/ad/smalltalk/education/"><FONT 
            face="Arial, sans-serif" color=#000000 
          size=-1>Education</FONT></A></TD>
          <TD width=8 bgColor=#99ccff height=21>&nbsp;</TD></TR>
        <TR>
          <TD bgColor=#000000 colSpan=4><IMG height=1 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1></TD></TR>
        <TR>
          <TD width=8>&nbsp;</TD>
          <TD width=134 colSpan=2><IMG height=6 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1><BR><FONT 
            face="Arial, sans-serif" color=#ccffff size=-1><B>Related 
            links:</B></FONT></TD>
          <TD width=8>&nbsp;</TD></TR>
        <TR>
          <TD width=8>&nbsp;</TD>
          <TD width=10>&nbsp;</TD>
          <TD vAlign=bottom width=124><A class=nav style="COLOR: #ccffff" 
            href="http://www-4.ibm.com/software/ad/r/vadd6/"><FONT 
            face="Arial, sans-serif" color=#ccffff size=-1>VisualAge Developer 
            Domain </FONT></A></TD>
          <TD width=8 height=21>&nbsp;</TD></TR>
        <TR>
          <TD width=8>&nbsp;</TD>
          <TD>&nbsp;<BR><IMG height=7 
            src="SmallTALKMemoryAnalysis_files/ra_c.gif" width=7></TD>
          <TD width=134>&nbsp;<BR><A class=nav style="COLOR: #ccffff" 
            href="http://www.ibm.com/planetwide/"><FONT face="Arial, sans-serif" 
            color=#ccffff size=-1><B>IBM Worldwide</B></FONT></A></TD>
          <TD width=8 height=21>&nbsp;</TD></TR></TBODY></TABLE><IMG height=1 alt="" 
      src="SmallTALKMemoryAnalysis_files/c.gif" width=150 border=0> <!--#include virtual="/software/main/inc/warning.inc" --><!--#include virtual="/software/main/inc/warning.inc" --><BR>&nbsp;</TD>
    <TD width="100%"><FONT face="Arial, sans-serif" size=-1><A 
      name=navskip></A><!--content--><!--*************************************************************************--><!--*************************************************************************--><!--BREADCRUMB--><!--This is your breadcrumb trail include.  Each section in your product directory needs to have one.  Naming convention is:  /software/ad/prodname subdir/inc/navback-sectionname.inc--><!-- Change level of navigation - do not remove the colons between each entry or any of the entries.--><!--*************************************************************************--><!--BREADCRUMB-->
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD><SPACER width="8" type="block">&nbsp;</TD>
          <TD width="100%"><FONT face=Arial,Helvetica,Helv color=#000000 
            size=2><FONT face="arial, helvetica, helv" size=1><BR><A 
            href="http://www-4.ibm.com/software/ad/smalltalk/">VisualAge 
            Smalltalk</A> &gt; <A 
            href="http://www-4.ibm.com/software/ad/smalltalk/discussion/index.html">Eye 
            on Smalltalk</A> &gt; 
            <P><!---------Right Side Bar--->
            <TABLE width=130 align=right border=0 valign="top">
              <TBODY>
              <TR>
                <TD width=130 colSpan=2><IMG height=3 alt="" 
                  src="SmallTALKMemoryAnalysis_files/lilblueline.gif" width=130 
                  align=right border=0></TD></TR>
              <TR>
                <TD width=125>
                  <TABLE border=0>
                    <TBODY>
                    <TR>
                      <TD vAlign=top align=right width=7><IMG height=10 alt="" 
                        src="SmallTALKMemoryAnalysis_files/arrowrt.gif" width=7 
                        border=0></TD>
                      <TD width=118><FONT face="arial, helvetica, helv" 
                        size=1><A 
                        href="http://www-4.ibm.com/software/ad/smalltalk/discussion/2000/april/dev0400.html#download">Download 
                        the Memory Consumption Monitor</A> 
                  </FONT></TD></TR></TBODY></TABLE><!--End links area-->
              <TR>
                <TD width=130 colSpan=2><IMG height=3 alt="" 
                  src="SmallTALKMemoryAnalysis_files/lilblueline.gif" width=130 
                  align=right border=0><BR></TD></TR></TBODY></TABLE><!--End right column area--><!--------------------------------------------------------------------------------------------------><IMG 
            src="SmallTALKMemoryAnalysis_files/kehn.jpg" align=left> <FONT 
            size=4><B>Eye on Programming</B></FONT> <BR><FONT 
            size=3><B>Smalltalk Dynamic Memory Consumption Analysis</B></FONT> 
            <P><FONT size=2>by Dan Kehn</FONT> 
            <P><FONT face="arial, helv, helvetica" color=#999999 size=2>April 
            2000</FONT> <!------------------------------------------------------------------------------------------------------>
            <P><FONT face=Arial size=2>Ah, my reflections on the carefree 
            moments of youth. This is what gives vigor to this month's 
            article.</FONT>
            <P><FONT face=Arial size=2>Certainly these reflections include 
            delegation (denial?) of responsibility--and the pursuit of this 
            should intrigue today's object-oriented developer. Nowhere else is 
            this better epitomized than in the simplicity of Smalltalk's memory 
            management. And in harsh contrast, who among us has not suffered in 
            our pre-Smalltalk days of the tiresome chore of managing memory? 
            </FONT>
            <P><FONT face=Arial size=2><!-- pullquote ------------------------------------------------------------- --></FONT>
            <TABLE cellSpacing=4 width="100%" border=0><!-- --horiz-------- -->
              <TBODY>
              <TR>
                <TD colSpan=2>
                  <P><FONT face=Arial size=2><IMG height=1 
                  src="SmallTALKMemoryAnalysis_files/paper.gif" 
                  width="100%"></FONT></P></TD></TR>
              <TR>
                <TD>
                  <P><FONT face=Arial size=2><FONT face="arial, helv, helvetica" 
                  color=#999999 size=3>"How you design and architect your 
                  application affects the way that memory is used. But there are 
                  also subtle implementation details that can produce 
                  inefficiencies."</FONT> </FONT></P></TD></TR><!-- --horiz-------- -->
              <TR>
                <TD colSpan=2>
                  <P><FONT face=Arial size=2><IMG height=1 
                  src="SmallTALKMemoryAnalysis_files/paper.gif" 
                  width="100%"></FONT></P></TD></TR></TBODY></TABLE>
            <P><FONT face=Arial size=2><!-- end of pullquote --------------------------------------------------------- --></FONT>
            <P><FONT face=Arial size=2>Or even worse, having to find the cause 
            behind errant references? I could wax eloquently on the past joys 
            (?) of debugging memory exceptions, but instead, let's focus on the 
            potential foibles that occasionally introduce themselves into our 
            otherwise idyllic environment.</FONT>
            <P><FONT face=Arial size=2>"There is no such thing as a free lunch." 
            Indeed, it is sobering news that while Smalltalk relieves us in 
            great part of the burden of memory management, we are nonetheless 
            well advised to consider some of the more subtle points of our 
            nearly carefree programming world. This article will focus on these 
            issues, hopefully giving you a good flavor for Smalltalk's memory 
            management scheme. That said, let's lay some groundwork, starting 
            necessarily with terminology. </FONT>
            <P><FONT face=Arial size=2>As an aside, when I was a youngster 
            growing up in Ohio, one of my small delights was looking for the 
            toys included in boxes of cereal. I admit that I often dug down to 
            the bottom as soon as I opened the box. In remembrance of this 
            fleeting moment of childhood, I am including a special surprise at 
            the bottom of this article. Do not feel ashamed if you skip directly 
            <U><A 
            href="http://www-4.ibm.com/software/ad/smalltalk/discussion/2000/april/dev0400.html#surprise">there</A></U>. 
            </FONT>
            <P><FONT face=Arial size=2><B>Terminology</B></FONT> 
            <P><FONT face=Arial size=2>Now onto more serious business. Note that 
            a few of these definitions were borrowed directly from the <I>IBM 
            Smalltalk User's Guide &amp; Reference.</I></FONT> 
            <P align=left><FONT face=Arial color=#0066cc size=2><I><B>Virtual 
            Machine (VM)</B></I></FONT> <BR><FONT face=Arial size=2>The program 
            that provides the execution environment on a single machine. It maps 
            data and logic to the executing machine architecture, isolating the 
            application code from the architecture of the machine. Smalltalk and 
            Java both provide virtual machines in which to run their 
            environment. Their capacities are similar. </FONT>
            <P align=left><FONT face=Arial color=#0066cc size=2><I><B>Garbage 
            Collection</B></I></FONT> <BR><FONT face=Arial size=2>The process of 
            recovering memory by collecting only those objects that are still 
            referenced and thereby reclaiming the memory previously occupied by 
            unreferenced objects. This is one of the responsibilities of the 
            virtual machine, and the primary focus of this article. </FONT>
            <P><FONT face=Arial size=2>The principle of Smalltalk's memory 
            reclamation scheme is based on the observation that objects have a 
            bi-modal distribution of lifespans. There are many objects that 
            "die" very young, and some that live to a ripe old age. So two 
            approaches are employed: <I>scavenging</I> to reclaim short-lived 
            objects and <I>global garbage collection</I> ("using the mark and 
            sweep" algorithim) to reclaim long-lived objects. These techniques 
            are collectively called <I>garbage collection</I> in the VisualAge 
            documentation, but the more precise term is <I>generational 
            scavenging</I>. </FONT>
            <P align=left><FONT face=Arial color=#0066cc size=2><I><B>New 
            Space</B> </I></FONT><BR><FONT face=Arial size=2>Memory area for 
            newly created objects. New space consists of two memory segments. 
            The system uses one segment at a time. When the system conducts a 
            scavenge, it copies only those objects that are still in use to the 
            idle memory segment. Then, it begins using the idle segment and 
            stops using the other segment. </FONT>
            <P align=left><FONT face=Arial color=#0066cc 
            size=2><I><B>Scavenge</B></I></FONT> <BR><FONT face=Arial size=2>A 
            rapid technique of manipulating new space in order to recover unused 
            memory by copying only referenced objects into another segment of 
            new space memory, making the prior segment available for additional 
            allocations. Also sometimes called a "flip", since referenced 
            objects are "flipped" from the previously active segment to the new 
            active segment. This recovery technique is optimal in the case where 
            there are many short-lived objects and few long-lived objects. A 
            second technique, to be described shortly, addresses the reclamation 
            of memory previously occupied by long-lived objects. </FONT>
            <P><FONT face=Arial size=2>Traditionally, objects are shown in an 
            ethereal space, inexplicably as rounded figures surrounded by some 
            combination of lines, arrows, etc., for example: </FONT>
            <P><FONT face=Arial size=2><IMG 
            src="SmallTALKMemoryAnalysis_files/dev0100-1.jpg" align=bottom 
            border=0></FONT> 
            <P><FONT face=Arial size=2>But in harsh reality, Smalltalk objects 
            are not circular. In fact, I have seen them up-close, and I can 
            assure you that they are rectangular. </FONT>:-) <FONT face=Arial 
            size=2><BR>And they are not floating in space, but are packed 
            tightly one-against-another, like this: </FONT>
            <P><FONT face=Arial size=2><IMG 
            src="SmallTALKMemoryAnalysis_files/dev0100-2.jpg" align=bottom 
            border=0><BR><BR>For the sake of this example, let's assume that B 
            and C are byte subclasses, like String, consequently they only 
            reference primitive objects, instances of Character.</FONT>
            <P><FONT face=Arial size=2>When the garbage collector performs a 
            scavenge, it simply starts from the top of the new space and copies 
            the referenced objects. In the example above, A references B and C, 
            but the latter do not reference any objects via a pointer. Sadly, B 
            and C cannot assure their own perpetuation into the active new 
            space, for only a reference to them can accomplish this. Hence the 
            importance of class type, that is, bytes subclasses versus pointer 
            subclasses, since the former cannot reference other instances. This 
            "instance shape" designation is stored in the header of each object 
            in order that its references, if present, can be handled properly by 
            the garbage collector. </FONT>
            <P><FONT face=Arial size=2>Note: Instances of classes have one of 
            several possible shapes: bytes, words, longs, and pointers. The 
            scavenge algorithm only needs to be concerned with the pointer-type 
            classes, since non-pointer classes will be copied into the active 
            new space only if they are referenced by pointer-type instances. 
            </FONT>
            <P><FONT face=Arial size=2>In summary, the scavenge simply traverses 
            a list of "structures" (objects), copying its referenced 
            "structures" (objects), the references of the references, and so on. 
            The execution stacks of each process are treated in the same manner 
            in new space, thus they are, in a manner of speaking, the "root" 
            objects of the new space. That is, the execution stacks with their 
            local variables and the like are included during a scavenge, and 
            this traversal entrains all the other referenced objects. </FONT>
            <P align=left><FONT face=Arial color=#0066cc size=2><I><B>Old Space 
            and Tenuring</B></I></FONT> <BR><FONT face=Arial size=2>In order to 
            avoid unnecessarily copying the same object again-and-again, it can 
            be promoted into a segment of memory that does not participate in 
            scavenges. This type of memory segment is called an <I>old space</I> 
            (or "tenured space"). One way an object gets tenured is by surviving 
            a series of scavenges. At that point, the VM assumes the object will 
            be present for a long time and thus tenures it into old space. 
            Additionally, an object can be tenured if an existing tenured object 
            references it. For example, since all classes are by definition 
            long-lived, their class and class instance variable references are 
            long-lived. Thus setting a class variable in a given class can 
            result in the promotion of the referenced object into the tenured 
            space. The system reclaims long-lived objects when it does global 
            garbage collections, using a technique to be described shortly. 
            </FONT>
            <P align=left><B><FONT face=Arial color=#0066cc size=2><I>Fixed 
            Space </I></FONT></B><BR><FONT face=Arial size=2>Stores designated 
            objects that the system cannot move by a garbage collection because 
            their memory addresses have been passed to the operating system. 
            </FONT>
            <P align=left><FONT face=Arial color=#0066cc size=2><I><B>Weak and 
            Strong References</B></I></FONT> <BR><FONT face=Arial size=2>In the 
            example above, A references B and C. By default, references are 
            strong references. That is, they imply that the memory used by the 
            referenced objects cannot be recovered until the referencing objects 
            themselves are garbage collected, or all references are broken (set 
            to nil). By contrast, a weak reference implies that the memory used 
            by the referenced object can be recovered if all remaining 
            references to it are weak. </FONT>
            <P><FONT face=Arial size=2>How does the VM handle weak references? 
            Returning to our example, object A can optionally mark its 
            references as weak, telling the garbage collector to ignore the fact 
            that it is a pointer-type. This information is recorded in a bit 
            field of the object's header. The weak object designation adds 
            negligable overhead to the scavenging algorithm. </FONT>
            <P><FONT face=Arial size=2>This point is further elaborated in the 
            comments of</FONT> <FONT face=Arial color=#000080 
            size=2>Object&gt;&gt;#makeWeak:</FONT> <FONT face=Arial 
            size=2><I><BR><BR>"A weak object is processed specially by the 
            garbage collector. When the garbage collector encounters a weak 
            object, it may nil out any pointer slots in the receiver if the slot 
            is the only remaining reference to the referenced object. When the 
            slot is nil'ed, the weak object, the removed pointer and the 
            </I></FONT><FONT face=Arial size=2><I>#instVarAt:</I></FONT><FONT 
            face=Arial size=2><I> index is placed into the system finalize queue 
            if there is enough room. The finalize queue is processed from 
            Smalltalk (see </I></FONT><FONT face=Arial 
            size=2><I>Processor&gt;&gt;#finalizeCycle</I></FONT><FONT face=Arial 
            size=2><I>). Note, if the finalize queue is empty, the slot is not 
            nil'ed and the removal of the object is deferred until the next 
            cycle."</I></FONT> 
            <P><FONT face=Arial size=2>This brings us to the next related term. 
            </FONT>
            <P align=left><FONT face=Arial color=#0066cc 
            size=2><I><B>Finalization</B></I></FONT> <BR><FONT face=Arial 
            size=2>Optionally, an object may choose to be notified just before 
            its memory will be reclaimed. This process is known as finalization 
            and is commonly employed in conjunction with weak objects. For 
            example, an object that encapsulates a system resource can be 
            notified that its memory is being reclaimed so it can free related 
            non-Smalltalk resources. </FONT>
            <P><FONT face=Arial size=2>An object can send the </FONT><FONT 
            face=Arial color=#000080 size=2>#addToBeFinalized</FONT><FONT 
            face=Arial size=2> or</FONT><FONT face=Arial color=#000080 size=2> 
            #onFinalizeDo:</FONT><FONT face=Arial size=2> message in order to be 
            notified. Note that the finalization of an object is aborted if a 
            new reference is created during the finalization notification. In 
            other words, it is possible that an object will be finalized 
            multiple times. This fact can be helpful should you want to create a 
            cache with a least-used algorithm using finalization as a manner of 
            "aging" the members of the cache.</FONT> 
            <P align=left><FONT face=Arial color=#0066cc size=2><I><B>Global 
            Garbage Collection</B></I></FONT> <BR><FONT face=Arial size=2>The 
            scavenge technique, while quite efficient, is not without 
            weaknesses. In particular, it does not reclaim long-lived objects in 
            old space. Thus when a scavenge fails to liberate more memory, the 
            next step is to try to eliminate unreferenced objects from old 
            space. This requires a more thorough approach, called a "mark and 
            sweep". In this case, all objects in the old space segments are 
            traversed, starting with the references of the root objects, that 
            is, the execution stacks of all processes and consequently those 
            objects referenced by the system dictionary, <I>Smalltalk</I>. As 
            each object is accessed, it is marked as "visited". A second sweep 
            is then made over each old space segment, adding the memory of the 
            unvisited objects to an available list and removing the "visited" 
            mark for the next time from those objects that survived the sweep. 
            </FONT>
            <P><FONT face=Arial size=2>This recovered memory is then reused, or 
            if necessary, the visited objects in the old space are moved into 
            these liberated areas to effectively compress old space and thereby 
            create larger contiguous spaces. If there are no survivors in the 
            old space segment, the memory is relinquished to the operating 
            system. If a global garbage collect fails to free enough memory, 
            another memory segment is allocated. </FONT>
            <P><FONT face=Arial size=2><B>Memory Leaks</B></FONT> 
            <P><FONT face=Arial size=2>The term "memory leak" surely originates 
            from traditional environments where memory is referenced by address 
            pointers. Since pointers in this sense do not exist in Smalltalk, 
            "memory leak" is a bit of a misnomer because memory references can 
            never be truly lost. Nonetheless, the term is retained for 
            historical reasons. This remark applies to my car keys as well, 
            which have, to the best of my knowledge, never been truly lost. 
            </FONT>
            <P><FONT face=Arial size=2>While traditional environments have the 
            trouble of memory not being freed, or worse, making references to 
            freed memory, only the former problem is a concern for Smalltalk 
            developers. Of course, in the majority of cases, given correctly 
            written code, the developer can leave the memory management task 
            entirely to the VM without additional tuning. However, if the 
            developer inadvertently leaves a dangling reference, memory will not 
            be freed. And since object-oriented designs tend towards matrix-like 
            relationships, a single errant reference can produce an enormous 
            community of "permanent residents". The ubiquitous nature of these 
            relationships also makes it difficult to find the erroneous 
            reference, creating a modern-day equivalent of the "needle in the 
            haystack" problem. </FONT>
            <P><FONT face=Arial size=2>Fortunately, this sort of problem occurs 
            infrequently. But perhaps as a consequence, tracking tools that are 
            tuned to this task are relatively few in the object-oriented 
            community. In my experience, the popular techniques for finding 
            errant references fall into two categories. I call them the "path 
            tracing" and the "path elimination" techniques. </FONT>
            <P><FONT face=Arial size=2>Let's consider a simple example: </FONT>
            <P><FONT face=Arial color=#000080 size=2>OrderedCollection new 
            addDependent: Transcript</FONT> 
            <P><FONT face=Arial size=2><U>Path tracing</U></FONT> 
            <P><FONT face=Arial size=2>Here we have created a reference in the 
            class variable of Object, called Dependents. This relationship must 
            be explicitly broken with the #removeDependent: method, otherwise 
            the memory of the target of the dependence will not be reclaimed. 
            Ignoring the fact that these methods are throwbacks from the 
            original implementation of Smalltalk, how do we detect the original 
            omission? The first approach, "path tracing", advocates a series of 
            inspector "Browse References", starting with the original object 
            that is not being relinquished. After several 
            references-of-references attempts, the inspector shows an 
            Association instance like this:</FONT> 
            <P><FONT face=Arial color=#000080 size=2>'Dependents' -&gt; 
            IdentityDictionary(OrderedCollection(an EtTranscript))</FONT> 
            <P><FONT face=Arial size=2>At this point, hopefully a small light 
            bulb goes off in the developer's head and they say, "Hmm-m, maybe 
            there is an errant reference in the Dependents dictionary of 
            Object". Depending on the amount of time this hypothetical developer 
            had spent trying to find the cause of the problem, this may not be 
            their exact words, but you get the idea.</FONT> 
            <P><FONT face=Arial size=2><U>Path elimination</U></FONT> 
            <P><FONT face=Arial color=#000000 size=2>The causes of other memory 
            leaks are of a similar nature, that is, failing to break a reference 
            from a long-lived object to a shorter-lived object. Often these 
            objects are part of a notification mechanism. For example, VisualAge 
            itself relies heavily on the notification scheme defined in the 
            AbtObservableObject hierarchy and redefined as an extension in the 
            Object hierarchy by the AbtCLDTAdditions application. 
            AbtCLDTAdditions includes a class variable, AbtEventDependents, 
            which fulfills the same role as the Dependents dictionary above--and 
            presents the same potential pitfall. The graphics subsystem of base 
            Smalltalk, CommonWidgets, has similar mechanisms, created by methods 
            like </FONT><FONT face=Arial color=#000080 
            size=2>#addCallback:receiver:selector:clientData:</FONT><FONT 
            face=Arial color=#000000 size=2> and </FONT><FONT face=Arial 
            color=#000080 
            size=2>#addEventHandler:receiver:selector:clientData:</FONT><FONT 
            face=Arial color=#000000 size=2>. These implementations, however, 
            differ notably from Object's </FONT><FONT face=Arial color=#000080 
            size=2>#addDependent: / #removeDependent:</FONT><FONT face=Arial 
            color=#000000 size=2> implementation in that they automatically 
            break the dependency when the observed object (part) or widget is 
            destroyed. Subsequently, it is only under unusual circumstances that 
            the developer can mistakenly create an unbroken reference directly 
            attributable to a part or widget. It is nonetheless possible, for 
            example, by creating a dependency from an outer scope long-lived 
            object to a short-lived object, as shown below: </FONT>
            <P><FONT face=Arial><FONT size=-1><FONT color=#000080>self 
            parent</FONT></FONT></FONT> <BR><FONT face=Arial><FONT 
            color=#000080><FONT size=-1>&nbsp;&nbsp;&nbsp; addEventHandler: 
            XmNexposeCallback</FONT></FONT></FONT> <BR><FONT face=Arial><FONT 
            color=#000080><FONT size=-1>&nbsp;&nbsp;&nbsp; receiver: 
            self</FONT></FONT></FONT> <BR><FONT face=Arial><FONT 
            color=#000080><FONT size=-1>&nbsp;&nbsp;&nbsp; selector: 
            #myParentWasExposed:clientData:callData:</FONT></FONT></FONT> 
            <BR><FONT face=Arial><FONT color=#000080><FONT 
            size=-1>&nbsp;&nbsp;&nbsp; clientData: nil.</FONT></FONT></FONT> 
            <P><FONT face=Arial size=2>In this contrived example, "self" is a 
            child widget that wants to be notified when its parent repaints. The 
            code above stores the dependency relationship in the receiver, that 
            is, the parent widget. If this child widget is created, destroyed, 
            and then recreated dynamically based on some user interaction, the 
            previously destroyed instance of this widget will remain in memory 
            IF the developer omits the removal of the dependency via 
            </FONT><FONT face=Arial color=#000080 
            size=2>#removeCallback:receiver:selector:clientData:</FONT><FONT 
            face=Arial size=2> during the widget's destroy processing. It is 
            this sort of omission that defies easy detection via the path 
            tracing technique.</FONT>
            <P><FONT face=Arial size=2>Thus the second technique, "path 
            elimination", comes into play when the complexity of the 
            relationship is too large to visualize mentally using the path 
            tracing technique. In effect, the key is to strategically eliminate 
            portions of the reference matrix until either (a) the tracing 
            technique becomes reasonable enough to try again, or (b) the cutting 
            of a relationship frees the "permanent resident", thereby indicating 
            which portion of the reference matrix was responsible. Of course, 
            this technique relies on the easy reproducibility of the problem, 
            since it is a destructive approach. That is, object references are 
            eliminated without the permission of the underlying application 
            code. </FONT>
            <P><FONT face=Arial size=2>Finally, this leads us to the toy at the 
            bottom of the cereal box, the <U><A name=surprise>Memory Consumption 
            Monitor</A></U>. </FONT>
            <P><FONT face=Arial size=2><B>The Memory Consumption 
            Monitor</B></FONT> 
            <P><FONT face=Arial size=2>This extension of the applications in the 
            <I>ENVY/Stats</I> configuration map summarizes the object statistics 
            in memory and allows you to easily see what kinds of objects were 
            relinquished between two measurements by simple selection.</FONT> 
            <P><FONT face=Arial size=2><IMG 
            src="SmallTALKMemoryAnalysis_files/dev0100-3.jpg" align=bottom 
            border=0></FONT> 
            <P><FONT face=Arial size=2>There are two principle modes in which to 
            employ this view: characterizing memory usage, and detecting memory 
            leaks.</FONT> 
            <P><FONT face=Arial size=2><U>Characterizing Memory Usage</U></FONT> 

            <P><FONT face=Arial size=2>Below is the standard Memory Monitor that 
            is included with VisualAge for Smalltalk: </FONT>
            <P><FONT face=Arial size=2><IMG 
            src="SmallTALKMemoryAnalysis_files/dev0100-4.jpg" align=bottom 
            border=0></FONT> 
            <P><FONT face=Arial size=2>The curve shows the available new space. 
            In this case, the active new space is being visualized, resulting in 
            a saw-tooth pattern for an idle system because the monitor itself is 
            consuming memory as it generates the above chart. This monitor is 
            included in the <I>ENVY/Stats</I> configuration map and provides an 
            overview of the memory usage patterns, but does not allow for 
            further investigation into the demographics of the memory consumers. 
            </FONT>
            <P><FONT face=Arial size=2>To this end, the Memory Consumption 
            Monitor summarizes similar information, but at a class level. The 
            monitor itself injects very little bias into the results as a 
            consequence of its activities. Optionally, the monitored classes or 
            the measured results can be filtered to focus exclusively on your 
            application-specific classes. The measures can be taken explicitly, 
            or taken automatically at regular intervals in order to summarize 
            the overall memory consumption usage patterns. A quick analysis of 
            these results will indicate if your application has a memory leak 
            before the problem rudely announces itself with disk-grinding 
            swapping and inordinately slow garbage collections. </FONT>
            <P><FONT face=Arial size=2><U>Detecting Memory Leaks</U></FONT> 
            <P><FONT face=Arial size=2>Using the previously-described techniques 
            in conjunction with the Memory Consumption Monitor, memory leaks are 
            found more easily. In addition, a custom inspector is included that 
            provides options for quickly cutting off reference branches when you 
            choose the path elimination technique. One of these options is 
            particularly interesting, "Cut References to Others". This choice 
            calls a method provided with the monitor, the object's </FONT><FONT 
            face=Arial color=#000080 size=2>#kesReleaseWithImpunity</FONT><FONT 
            face=Arial size=2> method, which by default calls </FONT><FONT 
            face=Arial color=#000080 size=2>#release</FONT><FONT face=Arial 
            size=2>. But other subclasses override this method in order to 
            remove those references that are non-critical from a path 
            elimination point of view. While this technique is rather extreme in 
            that it generally renders the object inoperable from an application 
            perspective, it typically eliminates dozens of references that are 
            not responsible for the retention of an object, often leaving only a 
            few references that can be easily followed via the path tracing 
            technique.</FONT>
            <P><FONT face=Arial size=2>In addition, this custom inspector does 
            not generate references itself, that is, subsequent inspecting and 
            browsing of references does not generate "noise" references 
            attributable to the inspector itself. As an added bonus, it can 
            optionally show the memory consumed by the inspected object or 
            objects. </FONT>
            <P><FONT face=Arial size=2><B>Parting Tidbits</B></FONT> 
            <P><FONT face=Arial size=2>How you design and architect your 
            application affects the way that memory is used. But there are also 
            subtle implementation details that can produce inefficiencies. Here 
            are a few I've collected over the years that fall into the 
            non-obvious category: </FONT>
            <OL>
              <LI><FONT face=Arial size=2>Global garbage collection is disabled 
              during callbacks from the operating system. In other words, if you 
              call out to the operating system <I>while passing a pointer to an 
              object</I>, and the receiver calls back into Smalltalk, System 
              entryCount will be greater than one, and all memory recovery 
              techniques are temporarily disabled. This makes sense, since on 
              reentry the VM has no idea what portions of Smalltalk memory might 
              later be referenced before the final return, so it cannot shuffle 
              memory around. The moral of the story: Keep your processing to a 
              minimum in this situation, defer the operation to outside of the 
              operating system callback (e.g., with </FONT><FONT face=Arial 
              color=#000080 size=2>CwAppContext default 
              asyncExecInUI:</FONT><FONT face=Arial size=2>, posting the request 
              to another process, etc.), or copy the object into OS memory so 
              garbage collection will not be disabled.</FONT> 
              <LI><FONT face=Arial size=2>Batch-oriented applications must call 
              </FONT><FONT face=Arial color=#000080 size=2>Processor 
              finalizeCycle</FONT><FONT face=Arial size=2> in order to finalize 
              unreferenced objects. This is normally handled in the system 
              </FONT><FONT face=Arial color=#000080 
              size=2>IdleProcess</FONT><FONT face=Arial size=2>, but typically 
              batch processing applications do not go idle.</FONT> 
              <LI><FONT face=Arial color=#000000 size=2>It is possible for the 
              scavenger to thrash needlessly if three conditions are met: (a) 
              the required amount of additional memory is quite small, (b) the 
              old space is nearly full, and (c) the new space is nearly full. In 
              this case, the VM temporarily suspends the tenure threshold in 
              order to avoid allocating another segment or performing a global 
              garbage collect, both of which are relatively expensive 
              operations. But if the executing code is very tight, allocating 
              then freeing a very small amount of memory, the scavenges can last 
              unnaturally long. This situation is relatively obscure, but can 
              produce a noticeable delay, in some drastic cases as much as 20-30 
              seconds. To detect this scenario, execute </FONT><FONT face=Arial 
              color=#000080 size=2>EsMemorySegment activeOldSpace 
              heapBytesFree</FONT><FONT face=Arial color=#000000 size=2> at 
              regular intervals in a background process. If the result is 12 
              bytes (the size of an object header), it is likely that the 
              scavenger is thrashing. Force a global garbage collect with 
              </FONT><FONT face=Arial color=#000080 size=2>System 
              globalGarbageCollect</FONT><FONT face=Arial color=#000000 size=2>. 
              You also might consider adding </FONT><FONT face=Arial 
              color=#000080 size=2>System globalGarbageCollect</FONT><FONT 
              face=Arial color=#000000 size=2> or </FONT><FONT face=Arial 
              color=#000080 size=2>System scavenge</FONT><FONT face=Arial 
              color=#000000 size=2> at an opportune point in your code, for 
              example, just before beginning a transaction if the active old 
              space is particularly full. Deciding what are the thresholds for 
              these actions will be the subject of a future article.</FONT> 
            </LI></OL>
            <P><FONT face=Arial size=2><B>Conclusion</B></FONT> 
            <P><FONT face=Arial size=2>The burden of memory management is so 
            greatly reduced in VM-based environments that developers are often 
            lulled into complacency, only addressing potential problems when 
            they are painfully obvious to their end-users. Using the memory 
            tools provided with Smalltalk and the extensions included in this 
            article, developers can quickly diagnose and correct memory problems 
            as a part of their quality assurance testing before product 
            shipment. </FONT>
            <P><FONT face=Arial size=2><B><A name=download>Memory Consumption 
            Monitor - Download and Installation Notes</A></B> 
            <UL type=disc>
              <LI><A 
              href="http://www-4.ibm.com/software/ad/smalltalk/downloads/kesStats.zip">Download 
              the Memory Consumption Monitor (kesStats.zip)</A> 
              <LI><FONT face=Arial size=2>The <U>Memory Consumption Monitor</U> 
              ZIP file includes delta editions of the <I>ENVY/Stats</I> 
              configuration maps for versions 4.02b and 5.0 of VisualAge 
              Smalltalk. Import the appropriate version of the <I>KES/Stats</I> 
              and the modified <I>ENVY/Stats</I> for your environment in order 
              to get more accurate object size calculations and avoid a 
              potential infinite loop. Then load the <I>KES/Stats</I> 
              configuration map and its required maps.</FONT> 
              <LI><FONT face=Arial size=2>Execute EtBaseTools 
              resetBrowserMappings if you want to return to the standard 
              inspectors.</FONT> 
              <LI><FONT face=Arial size=2>The code here is provided <U>AS IS</U> 
              and without a warranty of any kind.</FONT> </LI></UL>
            <P><FONT face=Arial size=2><B>References</B></FONT> 
            <OL>
              <LI><FONT face=Arial size=2>Ungar, D., "The Design and Evaluation 
              of a High Performance Smalltalk System," <I>ACM Distinguished 
              Dissertation Series</I>, 1987</FONT> 
              <LI><FONT face=Arial size=2>Beck, K., "Garbage Collection 
              Revealed," <I>The Smalltalk Report</I>, February 1995</FONT> 
              <LI><FONT face=Arial size=2>Winchester, J., Jones, M., "The 
              Strength of Weak References," <I>The Smalltalk Report</I>, 
              September 1997</FONT> 
              <LI><FONT face=Arial size=2>IBM Corporation, "Analyzing the 
              runtime performance of code," <I>IBM Smalltalk User's Guide</I>, 
              SC34-4773</FONT> </LI></OL><!----------------------------------------------------------------------------->
            <P><I>Tell us about other short topics you'd like to see covered by 
            posting your nominations in our <A 
            href="news://news.software.ibm.com/ibm.software.vasmalltalk">newsgroup</A></I>. 

            <P><A 
            href="http://www-4.ibm.com/software/ad/smalltalk/discussion/index.html"><IMG 
            src="SmallTALKMemoryAnalysis_files/back.gif" border=0></A> 
            <P><!--**********************************************************************************--><!--FOOTER--><BR></FONT></P></FONT></FONT></TD></TR></TBODY></TABLE><!--#include virtual="/software/main/inc/warning.inc" --><BR></FONT></TD></TR>
  <TR>
    <TD width=150>
      <TABLE cellSpacing=0 cellPadding=0 width=150 border=0>
        <TBODY>
        <TR bgColor=#000000>
          <TD align=middle width=49><A class=nav style="COLOR: #ffffff" 
            href="http://www.ibm.com/privacy/"><FONT face="Verdana, sans-serif" 
            color=#ffffff size=-2><B>Privacy</B></FONT></A></TD>
          <TD width=1 bgColor=#959595><IMG height=21 alt="" 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1 border=0></TD>
          <TD align=middle width=49><A class=nav style="COLOR: #ffffff" 
            href="http://www.ibm.com/legal/"><FONT face="Verdana, sans-serif" 
            color=#ffffff size=-2><B>Legal</B></FONT></A></TD>
          <TD width=1 bgColor=#959595><IMG height=1 alt="" 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1 border=0></TD>
          <TD align=middle width=49><A class=nav style="COLOR: #ffffff" 
            href="http://www.ibm.com/contact/"><FONT face="Verdana, sans-serif" 
            color=#ffffff size=-2><B>Contact</B></FONT></A></TD>
          <TD width=1 bgColor=#959595><IMG height=1 alt="" 
            src="SmallTALKMemoryAnalysis_files/c.gif" width=1 
        border=0></TD></TR></TBODY></TABLE></TD>
    <TD bgColor=#000000>&nbsp;</TD></TR></TBODY></TABLE></BODY></HTML>
