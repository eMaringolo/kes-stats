Class {
	#name : 'KesStaticMemoryConsumptionView',
	#superclass : 'AbtAppBldrView',
	#instVars : [
		'currentMeasure',
		'measuresTable',
		'statusMessage',
		'resultsTable',
		'measureNumber',
		'isPopUpMenuRequest'
	],
	#category : 'KesMemoryTools'
}

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView class >> allSubApplications [

	| apps unneededApps prefixes |

	prefixes :=
		#('Abt' 'Cc' 'Cf' 'Cg' 'Cm' 'Common' 'Ct' 'Cw'
		'Ds' 'Dt' 'Ea' 'Em' 'Ep' 'Es' 'Et'
		'Ew' 'Mc' 'Nls' 'Otiml' 'Sgml' 'Syp' 'Vt').
	prefixes := #().
	unneededApps :=
		(System loadedApplications select: [:app |
			(prefixes
				detect: [:prefix |
					app name size > prefix size and: [
						(app name copyFrom: 1 to: prefix size) = prefix
							and: [(app name at: prefix size + 1) isUppercase]]]
				ifNone: [nil])
					notNil])
						asSet.
	unneededApps copy do: [:app | unneededApps addAll: app allPrerequisites].
	apps :=
		System loadedApplications asSet
			removeAll: unneededApps;
			yourself.
	apps copy do: [:app | apps addAll: app allSubApplications].

	^apps asSortedCollection: [:a :b| a name < b name]
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView class >> IS_instanceInterfaceSpec [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^AbtInterfaceSpec new
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> abtBuildInternals [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for initializing the receiver by
	creating all the subparts and connections specified in the Composition Editor"

	| abtSeparatedConstants window form labelMeasures labelResults toggleShowMethods columnName
	 columnType columnMemory abtIntegerConverter abtCwMenuView mbiMeasures mbiResults mbiOptions
	 menuResults optionNoChoices optionAddMaps21 optionAddMaps2 optionAddMapsAndPrereqs2
	 optionAddApplications2 optionAddFromStats2 optionRemoveElement2 separatorA2 optionExclude
	 optionInclude separatorB2 optionFind2 optionFindSubclassesOf2 optionExpandAll2 optionCollapseAll2
	 optionSelectAll2 mapPrompter applicationPrompter menuMeasures optionOpenMeasure optionAddNewMeasure
	 separatorA optionAddMaps optionAddMapsAndPrereqs optionAddApplications optionAddFromStats
	 separatorB optionSaveMeasure optionRenameMeasure optionDeleteElement measures addNewMeasurePrompter
	 renameMeasurePrompter saveMeasuresPrompter openMeasuresPrompter selectResultsByNamePrompter
	 addApplicationFromMapAndPrereqsPrompter packagerStatisticsPrompter
	 selectResultsBySubclassesPrompter menuOptions mtIgnoreBaseApplications conn2 conn3 conn4 conn16
	 conn7 conn8 conn9 conn10 conn11 conn15 conn17 conn24 conn37 conn28 conn29 conn33 conn55 conn77
	 conn46 conn47 conn38 conn49 conn42 conn43 conn44 conn65 conn56 conn66 conn67 conn58 conn69 conn60
	 conn73 conn64 conn85 conn79 conn87 conn78 conn89 conn80 conn71 conn72 conn83 conn54 conn57 conn48
	 conn68 conn59 conn50 conn51 conn52 conn61 conn62 conn53 conn74 |
	abtSeparatedConstants := self class abtSeparatedConstants.
	window := AbtShellView abtCreatePart: 'Window' parent: nil owner: self .
	form := AbtFormView abtCreatePart: 'form' parent: window.
	labelMeasures := AbtLabelView abtCreatePart: 'labelMeasures' parent: form.
	labelResults := AbtLabelView abtCreatePart: 'labelResults' parent: form.
	measuresTable := AbtComboBoxView abtCreatePart: 'measuresTable' parent: form.
	toggleShowMethods := AbtToggleButtonView abtCreatePart: 'toggleShowMethods' parent: form.
	resultsTable := AbtContainerDetailsTreeView abtCreatePart: 'resultsTable' parent: form.
	columnName := AbtContainerDetailsColumn abtCreatePart: 'columnName' parent: resultsTable.
	columnType := AbtContainerDetailsColumn abtCreatePart: 'columnType' parent: resultsTable.
	columnMemory := AbtContainerDetailsColumn abtCreatePart: 'columnMemory' parent: resultsTable.
	statusMessage := AbtLabelView abtCreatePart: 'statusMessage' parent: form.
	menuResults := AbtCwMenuView abtCreatePart: 'menuResults' parent: self parentVisual owner: self .
	optionNoChoices := AbtPushButtonView abtCreatePart: 'optionNoChoices' parent: menuResults.
	optionAddMaps21 := AbtPushButtonView abtCreatePart: 'optionAddMaps21' parent: menuResults.
	optionAddMaps2 := AbtPushButtonView abtCreatePart: 'optionAddMaps2' parent: menuResults.
	optionAddMapsAndPrereqs2 := AbtPushButtonView abtCreatePart: 'optionAddMapsAndPrereqs2' parent: menuResults.
	optionAddApplications2 := AbtPushButtonView abtCreatePart: 'optionAddApplications2' parent: menuResults.
	optionAddFromStats2 := AbtPushButtonView abtCreatePart: 'optionAddFromStats2' parent: menuResults.
	optionRemoveElement2 := AbtPushButtonView abtCreatePart: 'optionRemoveElement2' parent: menuResults.
	separatorA2 := AbtSeparatorView abtCreatePart: 'separatorA2' parent: menuResults.
	optionExclude := AbtPushButtonView abtCreatePart: 'optionExclude' parent: menuResults.
	optionInclude := AbtPushButtonView abtCreatePart: 'optionInclude' parent: menuResults.
	separatorB2 := AbtSeparatorView abtCreatePart: 'separatorB2' parent: menuResults.
	optionFind2 := AbtPushButtonView abtCreatePart: 'optionFind2' parent: menuResults.
	optionFindSubclassesOf2 := AbtPushButtonView abtCreatePart: 'optionFindSubclassesOf2' parent: menuResults.
	optionExpandAll2 := AbtPushButtonView abtCreatePart: 'optionExpandAll2' parent: menuResults.
	optionCollapseAll2 := AbtPushButtonView abtCreatePart: 'optionCollapseAll2' parent: menuResults.
	optionSelectAll2 := AbtPushButtonView abtCreatePart: 'optionSelectAll2' parent: menuResults.
	mapPrompter := AbtTextPrompter abtCreatePart: 'mapPrompter' parent: self parentVisual owner: self .
	applicationPrompter := AbtTextPrompter abtCreatePart: 'applicationPrompter' parent: self parentVisual owner: self .
	menuMeasures := AbtCwMenuView abtCreatePart: 'menuMeasures' parent: self parentVisual owner: self .
	optionOpenMeasure := AbtPushButtonView abtCreatePart: 'optionOpenMeasure' parent: menuMeasures.
	optionAddNewMeasure := AbtPushButtonView abtCreatePart: 'optionAddNewMeasure' parent: menuMeasures.
	separatorA := AbtSeparatorView abtCreatePart: 'separatorA' parent: menuMeasures.
	optionAddMaps := AbtPushButtonView abtCreatePart: 'optionAddMaps' parent: menuMeasures.
	optionAddMapsAndPrereqs := AbtPushButtonView abtCreatePart: 'optionAddMapsAndPrereqs' parent: menuMeasures.
	optionAddApplications := AbtPushButtonView abtCreatePart: 'optionAddApplications' parent: menuMeasures.
	optionAddFromStats := AbtPushButtonView abtCreatePart: 'optionAddFromStats' parent: menuMeasures.
	separatorB := AbtSeparatorView abtCreatePart: 'separatorB' parent: menuMeasures.
	optionSaveMeasure := AbtPushButtonView abtCreatePart: 'optionSaveMeasure' parent: menuMeasures.
	optionRenameMeasure := AbtPushButtonView abtCreatePart: 'optionRenameMeasure' parent: menuMeasures.
	optionDeleteElement := AbtPushButtonView abtCreatePart: 'optionDeleteElement' parent: menuMeasures.
	(currentMeasure := AbtVariable abtCreatePart: 'currentMeasure' parent: self parentVisual owner: self ) partClass: KesStaticMemoryConsumptionMeasure.
	(measures := AbtVariable abtCreatePart: 'measures' parent: self parentVisual owner: self ) partClass: OrderedCollection.
	addNewMeasurePrompter := AbtTextPrompter abtCreatePart: 'addNewMeasurePrompter' parent: self parentVisual owner: self .
	renameMeasurePrompter := AbtTextPrompter abtCreatePart: 'renameMeasurePrompter' parent: self parentVisual owner: self .
	saveMeasuresPrompter := AbtFileSelectionPrompter abtCreatePart: 'saveMeasuresPrompter' parent: self parentVisual owner: self .
	openMeasuresPrompter := AbtFileSelectionPrompter abtCreatePart: 'openMeasuresPrompter' parent: self parentVisual owner: self .
	selectResultsByNamePrompter := AbtTextPrompter abtCreatePart: 'selectResultsByNamePrompter' parent: self parentVisual owner: self .
	addApplicationFromMapAndPrereqsPrompter := AbtTextPrompter abtCreatePart: 'addApplicationFromMapAndPrereqsPrompter' parent: self parentVisual owner: self .
	packagerStatisticsPrompter := AbtFileSelectionPrompter abtCreatePart: 'packagerStatisticsPrompter' parent: self parentVisual owner: self .
	selectResultsBySubclassesPrompter := AbtTextPrompter abtCreatePart: 'selectResultsBySubclassesPrompter' parent: self parentVisual owner: self .
	menuOptions := AbtCwMenuView abtCreatePart: 'menuOptions' parent: self parentVisual owner: self .
	mtIgnoreBaseApplications := AbtToggleButtonView abtCreatePart: 'mtIgnoreBaseApplications' parent: menuOptions.
	self 
		 primaryPart: window.
	window 
		 menu: ((abtCwMenuView := AbtCwMenuView abtCreatePart: #AbtCwMenuView parent:  nil )
			 abtReturnReceiver: (mbiMeasures := AbtCascadeButtonView abtCreatePart: 'mbiMeasures' parent: abtCwMenuView);
			 abtReturnReceiver: (mbiResults := AbtCascadeButtonView abtCreatePart: 'mbiResults' parent: abtCwMenuView);
			 abtReturnReceiver: (mbiOptions := AbtCascadeButtonView abtCreatePart: 'mbiOptions' parent: abtCwMenuView);
			 rowColumnType: 1);
		 buttonFontName: nil;
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtEdgeConstant new offsetIsPosition: true;  offset: 10);
			rightEdge: (AbtEdgeConstant new offsetIsPosition: true;  offset: 65);
			topEdge: (AbtEdgeConstant new offsetIsPosition: true;  offset: 10);
			bottomEdge: (AbtEdgeConstant new offsetIsPosition: true;  offset: 50));
		 textFontName: nil;
		 labelFontName: nil;
		 title: (abtSeparatedConstants at: 1)          " 'Static Memory Consumption' " .
	form 
		 buttonFontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10));
		 textFontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 labelFontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*'.
	labelMeasures 
		 object: (abtSeparatedConstants at: 2)          " 'Current:' " ;
		 alignment: 0;
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 0);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 0);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE));
		 foregroundColor: 'navy'.
	labelResults 
		 object: (abtSeparatedConstants at: 3)          " 'Results:' " ;
		 alignment: 0;
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 0);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			topEdge: (AbtEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 10; attachedTargetView: labelMeasures);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE));
		 foregroundColor: 'navy'.
	measuresTable 
		 items: (OrderedCollection new
			 yourself);
		 attributeName: #description;
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 10; attachedTargetView: labelMeasures);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 0);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 0);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE)).
	toggleShowMethods 
		 object: (abtSeparatedConstants at: 4)          " 'Show Methods' " ;
		 tabGroup: true;
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 10; attachedTargetView: labelMeasures);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE)).
	resultsTable 
		 headingFontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 refreshItemOnAttributeChange: false;
		 fontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 itemHasChildrenAttributes: ((Dictionary new: 0)
	yourself);
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 0);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 0);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 5; attachedTargetView: labelResults);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 0; attachedTargetView: statusMessage));
		 refreshEntireListOnChange: false;
		 rowSeparators: false;
		 itemChildrenAttributes: ((Dictionary new: 0)
	yourself).
	columnName 
		 width: 400;
		 attributeName: (abtSeparatedConstants at: 5)          " 'name' " ;
		 editable: false;
		 heading: (abtSeparatedConstants at: 6)          " 'Name' " .
	columnType 
		 width: 100;
		 attributeName: (abtSeparatedConstants at: 7)          " 'memoryType' " ;
		 editable: false;
		 heading: (abtSeparatedConstants at: 8)          " 'Type' " ;
		 horizontalHeadingAlignment: 1.
	columnMemory 
		 converter: ((abtIntegerConverter := AbtIntegerConverter abtCreatePart: #AbtIntegerConverter parent:  nil ));
		 attributeName: (abtSeparatedConstants at: 9)          " 'includedTotalDisplayValue' " ;
		 width: 60;
		 editable: false;
		 heading: (abtSeparatedConstants at: 10)          " 'Memory' " ;
		 horizontalAlignment: 2;
		 horizontalHeadingAlignment: 1.
	statusMessage 
		 object: (abtSeparatedConstants at: 11)          " '*' " ;
		 alignment: 0;
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 0);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 0);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHSELFOPPOSITE; offset: 60);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: -9));
		 traversalOn: false;
		 foregroundColor: 'navy'.
	mbiMeasures 
		 object: (abtSeparatedConstants at: 12)          " 'Measures' " .
	mbiResults 
		 object: (abtSeparatedConstants at: 13)          " 'Results' " .
	mbiOptions 
		 object: (abtSeparatedConstants at: 14)          " 'Options' " .
	optionNoChoices 
		 object: (abtSeparatedConstants at: 15)          " '<No choices>' " ;
		 enabled: false.
	optionAddMaps21 
		 object: (abtSeparatedConstants at: 16)          " 'Inspect Selection' " .
	optionAddMaps2 
		 object: (abtSeparatedConstants at: 17)          " 'Add applications from maps...' " .
	optionAddMapsAndPrereqs2 
		 object: (abtSeparatedConstants at: 18)          " 'Add applications from maps and prerequisites...' " .
	optionAddApplications2 
		 object: (abtSeparatedConstants at: 19)          " 'Add applications...' " .
	optionAddFromStats2 
		 object: (abtSeparatedConstants at: 20)          " 'Add from the packager statistics...' " .
	optionRemoveElement2 
		 object: (abtSeparatedConstants at: 21)          " 'Remove' " .
	optionExclude 
		 object: (abtSeparatedConstants at: 22)          " 'Exclude' " .
	optionInclude 
		 object: (abtSeparatedConstants at: 23)          " 'Include' " .
	optionFind2 
		 object: (abtSeparatedConstants at: 24)          " 'Select...' " .
	optionFindSubclassesOf2 
		 object: (abtSeparatedConstants at: 25)          " 'Select the subclasses of...' " .
	optionExpandAll2 
		 object: (abtSeparatedConstants at: 26)          " 'Expand all' " .
	optionCollapseAll2 
		 object: (abtSeparatedConstants at: 27)          " 'Collapse all' " .
	optionSelectAll2 
		 object: (abtSeparatedConstants at: 28)          " 'Select all' " .
	mapPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 29)          " '*' " ;
		 messageString: (abtSeparatedConstants at: 30)          " 'Named:' " ;
		 title: (abtSeparatedConstants at: 31)          " 'Add configuration maps' " .
	applicationPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 32)          " '*' " ;
		 messageString: (abtSeparatedConstants at: 33)          " 'Enter one or more names:' " ;
		 title: (abtSeparatedConstants at: 34)          " 'Add applications' " .
	optionOpenMeasure 
		 object: (abtSeparatedConstants at: 35)          " 'Open measure...' " .
	optionAddNewMeasure 
		 object: (abtSeparatedConstants at: 36)          " 'Add new measure...' " .
	optionAddMaps 
		 object: (abtSeparatedConstants at: 37)          " 'Add applications from maps...' " .
	optionAddMapsAndPrereqs 
		 object: (abtSeparatedConstants at: 38)          " 'Add applications from maps and prerequisites...' " .
	optionAddApplications 
		 object: (abtSeparatedConstants at: 39)          " 'Add applications...' " .
	optionAddFromStats 
		 object: (abtSeparatedConstants at: 40)          " 'Add from the packager statistics...' " .
	optionSaveMeasure 
		 object: (abtSeparatedConstants at: 41)          " 'Save...' " .
	optionRenameMeasure 
		 object: (abtSeparatedConstants at: 42)          " 'Rename...' " .
	optionDeleteElement 
		 object: (abtSeparatedConstants at: 43)          " 'Delete' " .
	addNewMeasurePrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 44)          " 'New measure' " ;
		 messageString: (abtSeparatedConstants at: 45)          " 'Name:' " ;
		 title: (abtSeparatedConstants at: 46)          " 'Add a new measure' " .
	renameMeasurePrompter 
		 defaultAnswerString: nil;
		 messageString: (abtSeparatedConstants at: 47)          " 'Enter new name:' " ;
		 title: (abtSeparatedConstants at: 48)          " 'Rename Measure' " .
	saveMeasuresPrompter 
		 defaultFileName: (abtSeparatedConstants at: 49)          " '*.MEM' " ;
		 searchMask: (abtSeparatedConstants at: 50)          " '*.MEM' " ;
		 accessType: 2;
		 title: (abtSeparatedConstants at: 51)          " 'Save Measure' " .
	openMeasuresPrompter 
		 defaultFileName: (abtSeparatedConstants at: 52)          " '*.MEM' " ;
		 searchMask: (abtSeparatedConstants at: 53)          " '*.MEM' " ;
		 title: (abtSeparatedConstants at: 54)          " 'Open Measure' " .
	selectResultsByNamePrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 55)          " '*' " ;
		 messageString: (abtSeparatedConstants at: 56)          " 'Matching:' " ;
		 title: (abtSeparatedConstants at: 57)          " 'Select results by name' " .
	addApplicationFromMapAndPrereqsPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 58)          " '*' " ;
		 messageString: (abtSeparatedConstants at: 59)          " 'Name:' " ;
		 title: (abtSeparatedConstants at: 60)          " 'Add configuration map and its prerequisites' " .
	packagerStatisticsPrompter 
		 defaultFileName: (abtSeparatedConstants at: 61)          " 'cmethods.es' " ;
		 searchMask: (abtSeparatedConstants at: 62)          " '*.es' " ;
		 title: (abtSeparatedConstants at: 63)          " 'Open packager statistics file' " .
	selectResultsBySubclassesPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 64)          " '*' " ;
		 messageString: (abtSeparatedConstants at: 65)          " 'Select the subclasses of:' " ;
		 title: (abtSeparatedConstants at: 66)          " 'Select Subclasses' " .
	mtIgnoreBaseApplications 
		 object: (abtSeparatedConstants at: 67)          " 'Ignore Base Applications' " ;
		 selection: true.
	self attributeConnections add: (conn2 := AbtAttributeToAttributeConnection new
		connectSource: menuResults
		featureName: #self
		feature: AbtCwMenuView IS_self
		toTarget: resultsTable
		featureName: #menu
		feature: AbtContainerDetailsTreeView IS_menu).
	optionExclude
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #excludeSelectedItems;
				arguments: #()).
	optionInclude
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #includeSelectedItems;
				arguments: #()).
	optionAddMaps2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: mapPrompter;
				selector: #prompt;
				arguments: #()).
	mapPrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #addConfigurationMaps:;
				arguments: (Array new: 1)).
	optionAddApplications2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: applicationPrompter;
				selector: #prompt;
				arguments: #()).
	applicationPrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #addApplications:;
				arguments: (Array new: 1)).
	resultsTable
		abtWhenPrimitive: #selectedItemsChanged
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #updateStatusMessage;
				arguments: #()).
	window
		abtWhenPrimitive: #openedWidget
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #updateStatusMessage;
				arguments: #()).
	self attributeConnections add: (conn15 := AbtAttributeToAttributeConnection new
		connectSource: measuresTable
		featureName: #selectedItem
		feature: AbtComboBoxView IS_selectedItem
		toTarget: currentMeasure
		variableFeatureName: #self
		featureSelector: #IS_self).
	self attributeConnections add: (conn17 := AbtAttributeToAttributeConnection new
		connectSource: measuresTable
		featureName: #items
		feature: AbtComboBoxView IS_items
		toTarget: measures
		variableFeatureName: #self
		featureSelector: #IS_self).
	optionAddNewMeasure
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: addNewMeasurePrompter;
				selector: #prompt;
				arguments: #()).
	self attributeConnections add: (conn37 := AbtAttributeToAttributeConnection new
		connectSource: currentMeasure
		variableFeatureName: #description
		featureSelector: #IS_description
		toTarget: renameMeasurePrompter
		featureName: #defaultAnswerString
		feature: AbtTextPrompter IS_defaultAnswerString).
	optionRenameMeasure
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: renameMeasurePrompter;
				selector: #prompt;
				arguments: #()).
	renameMeasurePrompter
		abtWhenPrimitive: #ok
		perform: 
			(conn29 := AbtEventToActionConnection new
				source: renameMeasurePrompter;
				eventName: #ok;
				actionProvider: currentMeasure
				variableFeatureName: #description
				featureSelector: #IS_description).
	optionSaveMeasure
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: saveMeasuresPrompter;
				selector: #prompt;
				arguments: #()).
	saveMeasuresPrompter
		abtWhenPrimitive: #ok
		perform: 
			(conn55 := AbtEventToActionConnection new
				source: saveMeasuresPrompter;
				eventName: #ok;
				actionProvider: currentMeasure
				variableFeatureName: #dechargerDans
				featureSelector: #IS_dechargerDans).
	optionDeleteElement
		abtWhenPrimitive: #clicked
		perform: 
			(conn77 := AbtEventToActionConnection new
				source: optionDeleteElement;
				eventName: #clicked;
				actionProvider: currentMeasure
				variableFeatureName: #supprimer
				featureSelector: #IS_supprimer).
	conn46 := AbtEventToActionConnection new
		connectSource: optionDeleteElement
		featureName: #clicked
		feature: AbtPushButtonView IS_clicked;
		actionProvider: measures
		variableFeatureName: #remove:
		featureSelector: #IS_remove_.
	conn46
		forParameter: #anObject
		perform: 
			(DirectedMessage new 
				receiver: currentMeasure;
				selector: #abtGetValueOfAttribute:;
				arguments: (Array with: AbtVariable IS_self)).
	optionOpenMeasure
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: openMeasuresPrompter;
				selector: #prompt;
				arguments: #()).
	openMeasuresPrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #ouvrirMesure:;
				arguments: (Array new: 1)).
	self attributeConnections add: (conn42 := AbtAttributeToAttributeConnection new
		connectSource: currentMeasure
		variableFeatureName: #fichier
		featureSelector: #IS_fichier
		toTarget: saveMeasuresPrompter
		featureName: #defaultFileName
		feature: AbtFileSelectionPrompter IS_defaultFileName).
	optionExpandAll2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #expandAll;
				arguments: #()).
	optionCollapseAll2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #collapseAll;
				arguments: #()).
	conn65 := AbtEventToCodeHookConnection new
		connectSource: resultsTable
		featureName: #defaultActionRequested
		feature: AbtContainerDetailsTreeView IS_defaultActionRequested;
		receiver: self selector: #openBaseObject: selectorArgumentCount: 1.
	conn65
		forParameter: #parameter1
		perform: 
			(DirectedMessage new 
				receiver: resultsTable;
				selector: #abtGetValueOfAttribute:;
				arguments: (Array with: AbtContainerDetailsTreeView IS_selectedItem)).
	optionAddMaps
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: optionAddMaps2;
				selector: #click;
				arguments: #()).
	optionAddApplications
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: optionAddApplications2;
				selector: #click;
				arguments: #()).
	optionFind2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: selectResultsByNamePrompter;
				selector: #prompt;
				arguments: #()).
	selectResultsByNamePrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #searchForResult:;
				arguments: (Array new: 1)).
	selectResultsByNamePrompter
		abtWhenPrimitive: #ok
		perform: 
			(conn60 := AbtEventToActionConnection new
				source: selectResultsByNamePrompter;
				eventName: #ok;
				actionProvider: selectResultsByNamePrompter
				featureName: #defaultAnswerString
				feature: AbtTextPrompter IS_defaultAnswerString).
	optionAddMapsAndPrereqs
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: optionAddMapsAndPrereqs2;
				selector: #click;
				arguments: #()).
	optionAddMapsAndPrereqs2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: addApplicationFromMapAndPrereqsPrompter;
				selector: #prompt;
				arguments: #()).
	addApplicationFromMapAndPrereqsPrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #addConfigurationMapsWithPrequisites:;
				arguments: (Array new: 1)).
	optionAddFromStats
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: optionAddFromStats2;
				selector: #click;
				arguments: #()).
	optionAddFromStats2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: packagerStatisticsPrompter;
				selector: #prompt;
				arguments: #()).
	packagerStatisticsPrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #addFromPackagerStatistics:;
				arguments: (Array new: 1)).
	self attributeConnections add:(conn89 := AbtAttributeToCodeHookConnection new
		connectSource: optionRemoveElement2
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled
		toTarget: self selector: #removeResultsIsValid).
	resultsTable abtWhenPrimitive: #selectedItemsChanged perform: 
		( DirectedMessage new receiver: conn89; selector: #setAttributeValueFromCodeHook).
	optionRemoveElement2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #removeSelectedResults;
				arguments: #()).
	optionSelectAll2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: resultsTable;
				selector: #selectAllItems;
				arguments: #()).
	optionFindSubclassesOf2
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: selectResultsBySubclassesPrompter;
				selector: #prompt;
				arguments: #()).
	selectResultsBySubclassesPrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #searchResultsForSubclassesOf:;
				arguments: (Array new: 1)).
	self attributeConnections add: (conn54 := AbtAttributeToAttributeConnection new
		connectSource: menuMeasures
		featureName: #self
		feature: AbtCwMenuView IS_self
		toTarget: mbiMeasures
		featureName: #menu
		feature: AbtCascadeButtonView IS_menu).
	addNewMeasurePrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #addNewMeasure:;
				arguments: (Array new: 1)).
	self attributeConnections add: (conn48 := AbtAttributeToAttributeConnection new
		connectSource: menuResults
		featureName: #self
		feature: AbtCwMenuView IS_self
		toTarget: mbiResults
		featureName: #menu
		feature: AbtCascadeButtonView IS_menu).
	resultsTable
		abtWhenPrimitive: #drawBackgroundRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #drawResultsBackgroundRequested:;
				arguments: (Array new: 1)).
	optionAddMaps21
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #inspectSelection;
				arguments: #()).
	self attributeConnections add: (conn50 := AbtAttributeToAttributeConnection new
		connectSource: menuOptions
		featureName: #self
		feature: AbtCwMenuView IS_self
		toTarget: mbiOptions
		featureName: #menu
		feature: AbtCascadeButtonView IS_menu).
	self attributeConnections add:(conn51 := AbtAttributeToCodeHookConnection new
		connectSource: toggleShowMethods
		featureName: #selection
		feature: AbtToggleButtonView IS_selection
		toTarget: self selector: #isShowingMethods).
	toggleShowMethods
		abtWhenPrimitive: #selectionChanged
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #showMethods:;
				arguments: (Array new: 1)).
	self attributeConnections add: (conn61 := AbtAttributeToAttributeConnection new
		connectSource: currentMeasure
		variableFeatureName: #measures
		featureSelector: #IS_measures
		toTarget: resultsTable
		featureName: #items
		feature: AbtContainerDetailsTreeView IS_items).
	resultsTable
		abtWhenPrimitive: #popUpMenuRequest
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #updateResultsPopMenu;
				arguments: #()).
	mbiResults
		abtWhenPrimitive: #menuCascaded
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #updateResultsMenu;
				arguments: #()).
	mbiMeasures
		abtWhenPrimitive: #menuCascaded
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #updateMeasuresMenu;
				arguments: #()).
	self initializeAttributeConnections.
	self finalInitialize.

]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> addApplications: matchName [

	| apps applicationNames |

	applicationNames :=
		matchName subStrings collect: [:name |
			(name includes: $*)
				ifTrue: [name]
				ifFalse: [name , '*']].

	apps :=
		self class allSubApplications select: [:app |
			(applicationNames detect: [:nc | nc match: app name] ifNone: [nil]) notNil].

	apps isEmpty
		ifTrue: [
			^System message:
				('No applications match the name ''%1''.' bindWith: matchName)].

	apps :=
		CwListPrompter new
			items: apps;
			title: 'Add Applications';
			messageString: 'Select the applications to add:';
			selectionPolicy: XmEXTENDEDSELECT;
			prompt.

	apps notNil
		ifTrue: [
			AbtAppBldrSmalltalkEditorApp
				execLongOperation: [:dialogue |
					apps doWithIndex: [:app :i |
						dialogue cancelled
							ifFalse: [
								dialogue
									fractionComplete: (i / apps size)
									messageString:
										('Adding applications (%1)...' bindWith: app name).
								self currentMeasure addApplication: app]]]
				message: ('Adding applications...' abrPadWithBlanks: 96)
				allowCancel: true
				showProgress: true
				parent: nil].
	self updateStatusMessage
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> addConfigurationMaps: matchName [

	| maps name |

	(matchName includes: $*)
		ifTrue: [name := matchName]
		ifFalse: [name := matchName , '*'].

	(maps := EmConfigurationMap kesLoadedMapsMatching: name) isNil
		ifTrue: [^self].

	maps :=
		CwListPrompter new
			title: 'Add maps';
			messageString: 'Select the maps to add:';
			items: maps;
			selectionPolicy: XmEXTENDEDSELECT;
			prompt.

	maps notNil
		ifTrue: [
			AbtAppBldrSmalltalkEditorApp
				execLongOperation: [:dialogue |
					maps doWithIndex: [:map :i |
						dialogue cancelled
							ifFalse: [
								dialogue
									fractionComplete: (i / maps size)
									messageString:
										('Adding loaded maps (%1)...' bindWith: map name).
								self currentMeasure addConfigurationMap: map]]]
				message: ('Adding loaded maps...' abrPadWithBlanks: 96)
				allowCancel: true
				showProgress: true
				parent: nil].
	self updateStatusMessage
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> addConfigurationMapsWithPrequisites: matchName [

	| selectedMap name maps |

	(matchName includes: $*)
		ifTrue: [name := matchName]
		ifFalse: [name := matchName , '*'].

	(maps := EmConfigurationMap kesLoadedMapsMatching: name) isNil
		ifTrue: [^self].

	selectedMap :=
		CwListPrompter new
			title: 'Add a map and its prerequisites'; 
			messageString: 'Select a map:';
			items: maps copy;
			selectionPolicy: XmSINGLESELECT;
			prompt.

	selectedMap notNil
		ifTrue: [
			maps := selectedMap withAllRequiredMaps select: [:map | map areApplicationsLoaded].
			maps :=
				CwListPrompter new
					title: 'Add Maps';
					messageString: 'Select the maps to include:';
						items: maps copy;
					selectionPolicy: XmEXTENDEDSELECT;
					prompt].

	maps notNil
		ifTrue: [
			AbtAppBldrSmalltalkEditorApp
				execLongOperation: [:dialogue |
					maps doWithIndex: [:map :i |
						dialogue cancelled
							ifFalse: [
								dialogue
									fractionComplete: (i / maps size)
									messageString:
										('Adding the loaded maps (%1)...' bindWith: map name).
								self currentMeasure addConfigurationMap: map]]]
				message: ('Adding the loaded maps...' abrPadWithBlanks: 96)
				allowCancel: true
				showProgress: true
				parent: nil].
	self updateStatusMessage
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> addFromPackagerStatistics: filename [

	AbtAppBldrSmalltalkEditorApp
		execLongOperation: [:dialogue | | parser result |
			parser := KesPackagerStatisticsParser new.
			parser
				abtWhenChanged: #fractionComplete
				perform: (
					DirectedMessage
						selector: #value
						arguments: nil
						receiver: [
							dialogue
								fractionComplete: parser fractionComplete;
								messageString: (
									'Analyzing packager statistics (phase %1 of %2)...'
										bindWith: parser phase printString with: parser totalPhases printString)]).
			result := parser parseFilename: filename.
			result notNil
				ifTrue: [self currentMeasure addApplicationMeasures: result].

			parser abrRemoveAllInterest]
		message: ('Analyzing packager statistics...'
				abrPadWithBlanks: 96)
		allowCancel: false
		showProgress: true
		parent: nil.
	self updateStatusMessage
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> addNewMeasure: description [
	| newMeasure |

	newMeasure :=
		KesStaticMemoryConsumptionMeasure new
			description: description;
			yourself.

	self measures
		abtPerformAction: #add:
		with: newMeasure.
	measuresTable selectedItem: newMeasure
	
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> collapseAll [

	resultsTable
		deferRefreshWhile: [resultsTable items do: [:x | self collapseItem: x]]
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> collapseItem: item [

	resultsTable collapseItem: item
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> currentMeasure [

	^(self subpartNamed: 'currentMeasure') value
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> drawResultsBackgroundRequested: anEwTableListDrawBackgroundCallbackData [

	| rc pixel |

	(anEwTableListDrawBackgroundCallbackData item notNil
		and: [anEwTableListDrawBackgroundCallbackData columnPosition = 3])
	ifTrue: [
		rc := anEwTableListDrawBackgroundCallbackData renderContext.
		pixel := self widget window getPalette nearestPixelValue: (CgRGBColor red: 16rBFBF green: 16rBFBF blue: 16rBFBF).

		(pixel = rc drawable blackPixel)
			ifFalse: [
				rc setForeground: pixel.
				rc drawable fillRectangle: rc gc x: rc x y: rc y width: rc width height: rc height.
				anEwTableListDrawBackgroundCallbackData doit: true]]
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> excludeSelectedItems [
	| ancestors |

	ancestors := Set new.
	resultsTable selectedItems do: [:element |
		ancestors addAll: element ancestors.
		element
			isIncluded: false;
			refreshForView: self].
	ancestors do: [:p| p refreshForView: self].

	self updateStatusMessage
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> expandAll [

	resultsTable
		deferRefreshWhile: [resultsTable selectedItems do: [:x | self expandItem: x]]
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> expandItem: item [

	resultsTable expandItem: item.
	item children do: [:x | self expandItem: x]
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> finalInitialize [

	| dict |

	resultsTable items: #().
	isPopUpMenuRequest := false.

	dict := Dictionary new.
	KesStaticMemoryConsumption allSubclasses do: [:cls | dict at: cls name put: #hasChildren].
	resultsTable itemHasChildrenAttributes: dict.

	dict := Dictionary new.
	KesStaticMemoryConsumption allSubclasses do: [:cls | dict at: cls name put: #children].
	resultsTable itemChildrenAttributes: dict.

	measureNumber := 0.
	self addNewMeasure: '<untitled>'
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> includeSelectedItems [
	| ancestors |

	ancestors := Set new.
	resultsTable selectedItems do: [:element |
		ancestors addAll: element ancestors.
		element
			isIncluded: true;
			refreshForView: self].
	ancestors do: [:p| p refreshForView: self].

	self updateStatusMessage
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> inspectSelection [

	resultsTable selectedItems inspect
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> isShowingMethods [

	^KesClassStaticMemoryConsumption includeMethods
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> measureNumber [

	measureNumber := measureNumber + 1.

	^measureNumber
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> measures [

	^(self subpartNamed: 'measures')
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> openBaseObject: result [

	result openBaseObject
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> openMeasure: filename [

	| newMeasure |

	newMeasure := KesStaticMemoryConsumptionMeasure loadFrom: filename.
	newMeasure notNil
		ifTrue: [
			self measures
				abtPerformAction: #add:
				with: newMeasure]
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> refreshElement: element [

	resultsTable refreshItem: element
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> removeResultsIsValid [

	^(resultsTable selectedItems detect: [:item | item canBeDeleted] ifNone: [nil]) notNil
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> removeSelectedResults [

	System abtShowBusyCursorWhile: [
		(resultsTable selectedItems select: [:item | item canBeDeleted])
			do: [:item | self currentMeasure removeElement: item baseObject]]
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> searchForResult: matchName [

	| coll name |

	(matchName includes: $*)
		ifTrue: [name := matchName]
		ifFalse: [name := matchName , '*'].

	resultsTable deferRefreshWhile: [
		self collapseAll.
		resultsTable selectedItems: #().

		coll := OrderedCollection new.
		resultsTable items do: [:result | coll addAll: (result searchForChildNamed: name)].

		coll do: [:fils|
			| childsParent |
			childsParent := fils.
			[(childsParent := childsParent parent) notNil]
				whileTrue: [resultsTable expandItem: childsParent]].

		coll notEmpty
			ifTrue: [resultsTable setTopItem: coll first].
		resultsTable selectedItems: coll]
]

{ #category : 'KES-Tools' }
KesStaticMemoryConsumptionView >> searchResultsForSubclassesOf: matchName [

	| coll classNames classes |

	classNames :=
		matchName subStrings collect: [:name |
			(name includes: $*)
				ifTrue: [name]
				ifFalse: [name , '*']].

	classes :=
		Object allSubclasses
			select: [:cls | cls isMetaclass not and: [(classNames detect: [:nc | nc match: cls name] ifNone: [nil]) notNil]].

	classes isEmpty
		ifTrue: [
			^System message: ('No classes matching ''%1''.' bindWith: matchName)].

	classes :=
		CwListPrompter new
			items: (classes asSortedCollection: Class sortBlock);
			title: 'Search for subclasses';
			messageString: 'Select the subclasses for which to search:';
			selectionPolicy: XmEXTENDEDSELECT;
			prompt.

	classes isNil
		ifTrue: [^self].

	resultsTable deferRefreshWhile: [
		self collapseAll.
		resultsTable selectedItems: #().

		coll := OrderedCollection new.
		resultsTable items
			do: [:resultat | coll addAll: (resultat searchForChildrenOfSubclasses: classes)].

		coll do: [:fils | | childsParent |
			childsParent := fils.
			[(childsParent := childsParent parent) notNil]
				whileTrue: [resultsTable expandItem: childsParent]].

		coll notEmpty
			ifTrue: [resultsTable setTopItem: coll first].
		resultsTable selectedItems: coll]
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> showMethods: boolean [

	resultsTable items isNil
		ifTrue: [^self].

	KesClassStaticMemoryConsumption includeMethods: boolean.
	resultsTable items notEmpty
		ifTrue: [
			System abtShowBusyCursorWhile: [
				resultsTable items do: [:item| 
					item descendants do: [:child| child refreshMethods: boolean]]]].

	self updateStatusMessage.
	resultsTable refreshAllItems
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> updateMeasuresMenu [

"
OrderedCollection('optionOpenMeasure' 'optionAddNewMeasure' 'separatorA' 'optionAddMaps' 'optionAddMapsAndPrereqs' 'optionAddApplications' 'optionAddFromStats' 'separatorB' 'optionSaveMeasure' 'optionRenameMeasure' 'optionDeleteElement' )
"

	#('separatorA' 'optionAddMaps' 'optionAddMapsAndPrereqs' 'optionAddApplications'  'optionAddFromStats' 'separatorB' 'optionSaveMeasure' 'optionRenameMeasure' 'optionDeleteElement' )
		do: [:itemName|
			(self subpartNamed: itemName ifAbsent: [])
				manageChild;
				enabled: true.
			measuresTable selectedItem isNil
				ifTrue: [(self subpartNamed: itemName ifAbsent: []) enabled: false]]
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> updateResultsMenu [

"
OrderedCollection('optionAddMaps21' 'optionAddMaps2' 'optionAddMapsAndPrereqs2' 'optionAddrApplications2' 'optionAddFromStats2' 'optionRemoveElement2' 'separatorA2' 'optionExclude' 'optionInclude' 'separatorB2' 'optionFind2' 'optionFindSubclassesOf2' 'optionExpandAll2' 'optionCollapseAll2' 'optionSelectAll2' )
"

	#('optionFind2' 'optionFindSubclassesOf2' 'optionExpandAll2' 'optionCollapseAll2' 'optionSelectAll2')
		do: [:itemName|
			(self subpartNamed: itemName ifAbsent: [])
				manageChild;
				enabled: true.
			(resultsTable items size = 0)
				ifTrue: [
					isPopUpMenuRequest
						ifTrue: [(self subpartNamed: itemName ifAbsent: []) manageChildOnCreation: false; unmanageChild]
						ifFalse: [(self subpartNamed: itemName ifAbsent: []) enabled: false]]].

	#('optionRemoveElement2' 'separatorA2' 'optionExclude' 'optionInclude'  'separatorB2')
		do: [:itemName|
			(self subpartNamed: itemName ifAbsent: [])
				manageChild;
				enabled: true.
			(resultsTable selectedItems size = 0)
				ifTrue: [
					isPopUpMenuRequest
						ifTrue: [(self subpartNamed: itemName ifAbsent: []) manageChildOnCreation: false; unmanageChild]
						ifFalse: [(self subpartNamed: itemName ifAbsent: []) enabled: false]]].

	#('optionAddMaps2' 'optionAddMapsAndPrereqs2' 'optionAddApplications2'  'optionAddFromStats2')
		do: [:itemName|
			measuresTable selectedItem isNil
				ifTrue: [
					isPopUpMenuRequest
						ifTrue: [(self subpartNamed: itemName ifAbsent: []) manageChildOnCreation: false; unmanageChild]
						ifFalse: [(self subpartNamed: itemName ifAbsent: []) enabled: false]]].

	isPopUpMenuRequest
		ifTrue: [
			(resultsTable items size = 0 and: [measuresTable selectedItem isNil])
				ifTrue: [(self subpartNamed: 'optionNoChoices' ifAbsent: []) manageChildOnCreation: true; manageChild]
				ifFalse: [(self subpartNamed: 'optionNoChoices' ifAbsent: []) manageChildOnCreation: false; unmanageChild]]
		ifFalse: [(self subpartNamed: 'optionNoChoices' ifAbsent: []) manageChildOnCreation: false; unmanageChild].

	[isPopUpMenuRequest := false] abtDefer
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> updateResultsPopMenu [

	isPopUpMenuRequest := true.
	self updateResultsMenu.
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesStaticMemoryConsumptionView >> updateStatusMessage [

	| grandTotal selectionTotal elements selectionScale selectionScaleDisplayString
		grandTotalScale grandTotalScaleDisplayString selectionAverageScale
		selectionAverageScaleDisplayString selectionAverageMessage |

	grandTotal := selectionTotal := 0.
	selectionScale := 1024.
	selectionScaleDisplayString := 'K'.
	grandTotalScale := 1024.
	grandTotalScaleDisplayString := 'K'.
	selectionAverageScale := 1024.
	selectionAverageScaleDisplayString := 'K'.

	elements := (resultsTable items
		inject: Set new
		into: [:set :item |
			set addAll: (item descendants select: [:x| x isIncluded]).
			set]).
	elements do: [:x | grandTotal := grandTotal + x includedTotal].

	elements := (resultsTable selectedItems
		inject: Set new
		into: [:set :item |
			set addAll: (item descendants select: [:x| x isIncluded]).
			set]).
	elements do: [:x | selectionTotal := selectionTotal + x includedTotal].

	(selectionTotal < 10000)
		ifTrue: [
			selectionScale := 1.
			selectionScaleDisplayString := ' bytes'].

	(grandTotal < 10000)
		ifTrue: [
			grandTotalScale := 1.
			grandTotalScaleDisplayString := ' bytes'].

	(elements size <= 1)
		ifTrue: [selectionAverageMessage := '']
		ifFalse: [
			(elements size > 0 and: [(selectionTotal / elements size / 1024) truncated < 10000])
				ifTrue: [
					selectionAverageScale := 1.
					selectionAverageScaleDisplayString := ' bytes'].

			selectionAverageMessage := ', %1%2 on average'
				bindWith:
					(AbtDecimalConverter new
						decimalPlace: (selectionAverageScale = 1 ifTrue: [0] ifFalse: [1]);
						objectToPrint: (
							elements size = 0 ifTrue: [0] ifFalse: [(selectionTotal / elements size) // selectionAverageScale]))
				with: selectionAverageScaleDisplayString].
		
	statusMessage labelString: (
		('Total static memory: %1%2\Static memory for the %3 selected item(s): %4%5 (%6 %% of total%7)'
			addLineDelimiters)
				bindWithArguments:
					(
					OrderedCollection new
						add: (AbtIntegerConverter new objectToPrint: grandTotal // grandTotalScale);
						add: grandTotalScaleDisplayString;
						add: elements size printString;
						add: (AbtIntegerConverter new objectToPrint: selectionTotal // selectionScale);
						add: selectionScaleDisplayString;
						add: (
							AbtDecimalConverter new
								decimalPlace: 1;
								objectToPrint:
									(100.0 * selectionTotal) /
										(grandTotal = 0 ifTrue: [1] ifFalse: [grandTotal]));
						add: selectionAverageMessage;
						yourself))
]
