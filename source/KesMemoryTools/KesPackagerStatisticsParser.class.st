Class {
	#name : 'KesPackagerStatisticsParser',
	#superclass : 'Object',
	#instVars : [
		'fractionComplete',
		'phase'
	],
	#category : 'KesMemoryTools'
}

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesPackagerStatisticsParser class >> IS_fractionComplete [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^##( AbtAttributeSpec new
		attributeType: Fraction;
		getSelector: #fractionComplete;
		changeSymbol: #fractionComplete)
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesPackagerStatisticsParser class >> IS_instanceInterfaceSpec [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^AbtInterfaceSpec new
		featureNamed: #phase put: self IS_phase;
		featureNamed: #fractionComplete put: self IS_fractionComplete
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesPackagerStatisticsParser class >> IS_phase [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^##( AbtAttributeSpec new
		attributeType: Integer;
		getSelector: #phase;
		changeSymbol: #phase)
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesPackagerStatisticsParser >> extractMeasures: applicationsAndMethods [

	| step |

	step := 0.

	^(applicationsAndMethods keys asSortedCollection: [:a :b | a name < b name]) asOrderedCollection
		collect: [:app | | mma |
			mma := KesApplicationStaticMemoryConsumption methods: (applicationsAndMethods at: app).
			step := step + 1.
			self fractionComplete: (step / applicationsAndMethods size).
			mma]
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesPackagerStatisticsParser >> extractMethods: fichier [

	| stream cls methods elements method missingMethods token |

	stream := CfsReadFileStream open: fichier.
	stream isCfsError
		ifTrue: [
			System errorMessage: ('%1: %2' bindWith: fichier with: stream message).
			^nil].
	self fractionComplete: (0 / stream size).
	methods := OrderedCollection new.
	missingMethods := OrderedCollection new.

	[stream atEnd] whileFalse: [
		elements := stream nextLine subStrings.
		self fractionComplete: (stream position / stream size).
		(elements notEmpty and: [(cls := elements first asClass) notNil])
			ifTrue: [
				(elements size > 2 and: [(elements at: 2) = 'class']) ifTrue: [cls := cls class].
				[stream atEnd not and: [(elements := stream nextLine subStrings) notEmpty]]
					whileTrue: [
						self fractionComplete: (stream position / stream size).
						token := (elements first copyWithout: $#) asSymbol.
						method :=
							cls
								compiledMethodAt: token
								ifAbsent: [
									missingMethods add: token.
									nil].
						method notNil ifTrue: [methods add: method]]]].

	stream close.

	(missingMethods notEmpty and: [
		(System confirm: (
			'These methods listed in the statistics file do not exist in the current image, do you want to continue?\\%1' addLineDelimiters
				bindWith: missingMethods printString)) == false])
					ifTrue: [^nil].

	^methods
]

{ #category : 'KES-Tools' }
KesPackagerStatisticsParser >> fractionComplete [

	^fractionComplete
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesPackagerStatisticsParser >> fractionComplete: fraction [

	fractionComplete := fraction.
	self
		signalEvent: #fractionComplete with: fraction;
		signalEvent: #phase with: self phase
]

{ #category : 'KES-Tools' }
KesPackagerStatisticsParser >> parseFilename: filename [

	| methods applicationsAndMethods measures |

	self phase: 1.
	(methods := self extractMethods: filename) isNil
		ifTrue: [^nil].
		
	self phase: 2.
	applicationsAndMethods := self regroupApplicationsForMethods: methods.

	self phase: 3.
	measures := self extractMeasures: applicationsAndMethods.

	self phase: 4.
	measures := self reassembleMeasures: measures.

	^measures
]

{ #category : 'KES-Tools' }
KesPackagerStatisticsParser >> phase [

	^phase
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesPackagerStatisticsParser >> phase: unePhase [

	phase := unePhase
]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesPackagerStatisticsParser >> reassembleMeasures: measures [

	| measuresTable |

	measuresTable := Dictionary new.
	measures do: [:mesure | measuresTable at: mesure baseObject put: mesure].

	measures copy doWithIndex: [:mma :i | | appParent newMeasure |
		self fractionComplete: (i / (measures size * 2)).
		((appParent := mma baseObject parent) notNil
			and: [(measuresTable at: appParent ifAbsent: [nil]) isNil])
				ifTrue: [
					measures add: (
						newMeasure :=
							KesApplicationStaticMemoryConsumption new
								primBaseObject: appParent name;
								primName: appParent name asString;
								yourself).
					measuresTable at: appParent put: newMeasure]].

	measures doWithIndex: [:mma :i | | appParent |
		self fractionComplete: ((i + measures size) / (measures size * 2)).
		(appParent := mma baseObject parent) notNil
			ifTrue: [
				(measuresTable at: appParent) children add: mma.
				mma parent: (measuresTable at: appParent)]].

	^(measures select: [:mma | mma parent isNil]) asSortedCollection asOrderedCollection
		do: [:mma |
			mma
				refreshParent;
				canBeDeleted: false];
		yourself


]

{ #category : 'KES-Tools',
  #vaVisibility : 'private' }
KesPackagerStatisticsParser >> regroupApplicationsForMethods: methods [

	| applicationsAndMethods |

	applicationsAndMethods := Dictionary new.
	methods doWithIndex: [:method :i |
		self fractionComplete: (i / methods size).
		(applicationsAndMethods
			at: method application
			ifAbsent: [applicationsAndMethods at: method application put: OrderedCollection new])
				add: method].

	^applicationsAndMethods
]

{ #category : 'KES-Tools' }
KesPackagerStatisticsParser >> totalPhases [

	^4
]
