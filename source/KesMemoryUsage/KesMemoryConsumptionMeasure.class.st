Class {
	#name : 'KesMemoryConsumptionMeasure',
	#superclass : 'Magnitude',
	#instVars : [
		'time',
		'totalSize',
		'totalCount',
		'results',
		'label'
	],
	#pools : [
		'CldtConstants'
	],
	#category : 'KesMemoryUsage'
}

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure class >> IS_displayString [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^##(AbtAttributeSpec new
		 changeSymbol: #label;
		 getSelector: #asDisplayString;
		 attributeType: String)
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure class >> IS_instanceInterfaceSpec [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^AbtInterfaceSpec new
		featureNamed: #time put: self IS_time;
		featureNamed: #totalCount put: self IS_totalCount;
		featureNamed: #totalSize put: self IS_totalSize;
		featureNamed: #results put: self IS_results;
		featureNamed: #displayString put: self IS_displayString
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure class >> IS_results [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^##(AbtAttributeSpec new
		 changeSymbol: #results;
		 setSelector: #results:;
		 getSelector: #results;
		 attributeType: OrderedCollection)
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure class >> IS_time [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^##(AbtAttributeSpec new
		 changeSymbol: #time;
		 setSelector: #time:;
		 getSelector: #time;
		 attributeType: Time)
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure class >> IS_totalCount [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^##(AbtAttributeSpec new
		 changeSymbol: #totalCount;
		 setSelector: #totalCount:;
		 getSelector: #totalCount;
		 attributeType: Integer)
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure class >> IS_totalSize [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^##(AbtAttributeSpec new
		 changeSymbol: #totalSize;
		 setSelector: #totalSize:;
		 getSelector: #totalSize;
		 attributeType: Integer)
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure class >> kesIncludeInInstanceCount [

	^false
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure class >> label: aString time: aTime results: aResults totalCount: aTotalCount totalSize: aTotalSize [

	| measure |

	measure := self new.
	measure label: aString;
		time: aTime;
		results: aResults;
		totalCount: aTotalCount;
		totalSize: aTotalSize.

	^measure
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure class >> takeMeasurement [

	^self takeMeasurement: nil
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure class >> takeMeasurement: aString [

	| totalCount totalSize countInstances isIncluded |

	totalCount := totalSize := 0.
	countInstances := EsMemoryUseReport countAllMemoryUsingSelector: #countInstances 
			minCount: 1 minSize: 1 output: (ReadWriteStream on: String new).
	countInstances := countInstances select: [:result|
			isIncluded := (result at: 1) kesIncludeInInstanceCount.
			isIncluded ifTrue: [
				totalCount := totalCount + (result at: 2).
				totalSize := totalSize + (result at: 3)].
			isIncluded].

	^self 
			label: aString 
			time: Time now
			results: (countInstances collect: [:each| KesClassMemoryConsumption fromArrayCountInstances: each]) 
			totalCount: totalCount 
			totalSize: totalSize
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> < aMeasure [

	^self totalSize < aMeasure totalSize
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> asDisplayString [

	| stream topFive filteredResults |

	stream := WriteStream on: String new.

	(self label notNil and: [self label notEmpty]) 
		ifTrue: [stream nextPutAll: self label]
		ifFalse: [stream nextPutAll: '<untitled>'].

	self results isNil
		ifTrue: [^stream contents kesAsExcludedObject].

	filteredResults := self results select: [:result| result className asClass kesIncludeInInstanceCount].

	stream nextPutAll: ' @ '.
	stream nextPutAll: self time printString, ', count = '.
	stream nextPutAll: (filteredResults inject: 0 into: [:total :result| total + result totalCount]) kesLocalePrintString.
	stream nextPutAll: ' size = '.
	stream nextPutAll: (filteredResults inject: 0 into: [:total :result| total + result totalSize]) kesLocalePrintString.

	stream nextPutAll: ' top = '.
	1 to: (filteredResults size min: 10) do: [:i| 
		stream nextPutAll: (filteredResults at: i) className, ' '].

	^stream contents kesAsExcludedObject
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> asMinimumDisplayString [

	| stream topFive |

	stream := WriteStream on: String new.
	(self label notNil and: [self label notEmpty]) ifTrue: [stream nextPutAll: self label].

	^stream contents kesAsExcludedObject
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> asShortDisplayString [

	| stream topFive |

	stream := WriteStream on: String new.

	(self label notNil and: [self label notEmpty]) 
		ifTrue: [
			EsMemoryUseReport output: self label, ' ' on: stream leftJustifyTo: 24]
		ifFalse: [
			EsMemoryUseReport output: ' ' on: stream leftJustifyTo: 24].
	stream nextPutAll: self time printString, ' count = '.
	EsMemoryUseReport output: self totalCount kesLocalePrintString on: stream rightJustifyTo: 8.
	stream nextPutAll: ' size = '.
	EsMemoryUseReport output: self totalSize kesLocalePrintString on: stream rightJustifyTo: 10.

	^stream contents kesAsExcludedObject
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> filteredResults: aFilterString [
	| strings |

	strings := aFilterString subStrings collect: [:string| 
		(string last = $*)
			ifTrue: [string]
			ifFalse: [string, '*']].

	^(self results select: [:result| 
		(strings detect: [:string| string match: result className] ifNone: [nil]) notNil]) kesAsExcludedObject

]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> filteredResultsByClassName: aFilterString [

	| dict |

	dict := Dictionary new.
	(self filteredResults: aFilterString) 
		do: [:result| dict at: result className put: result].

	^dict kesAsExcludedObject
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> label [

	^label
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure >> label: aString [

	label := aString trimBlanks kesAsExcludedObject.
	self signalEvent: #displayString with: self asDisplayString
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure >> printOn: aStream [

	super printOn: aStream.
	aStream nextPutAll: ('(', self time printString, ', count = ', 
		self totalCount kesLocalePrintString, ', size = ', self totalCount kesLocalePrintString, ')') kesAsExcludedObject
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> results [

	^results
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure >> results: anOrderedCollection [

	results := anOrderedCollection kesAsExcludedObject.
	self signalEvent: #results with: anOrderedCollection
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> resultsByClassName [

	| dict |

	dict := Dictionary new.
	self results do: [:result| dict at: result className put: result].

	^dict kesAsExcludedObject
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> time [

	^time
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure >> time: aTime [

	time := aTime kesAsExcludedObject.
	self signalEvent: #time
		 with: aTime. 
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> totalCount [

	^totalCount
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure >> totalCount: anInteger [

	totalCount := anInteger.
	self signalEvent: #totalCount
		 with: anInteger. 
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionMeasure >> totalSize [

	^totalSize
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionMeasure >> totalSize: anInteger [

	totalSize := anInteger.
	self signalEvent: #totalSize
		 with: anInteger. 
]
