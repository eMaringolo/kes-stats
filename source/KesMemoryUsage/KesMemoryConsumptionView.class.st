Class {
	#name : 'KesMemoryConsumptionView',
	#superclass : 'AbtAppBldrView',
	#instVars : [
		'measures',
		'results',
		'autoMeasureTest',
		'measureList',
		'startAutoMeasurementChoice',
		'stopAutoMeasurementChoice',
		'resultsContainer',
		'autoMeasurementPrompter',
		'statusLine',
		'findString',
		'measurementNumber',
		'findNextButton'
	],
	#classVars : [
		'FilterString'
	],
	#pools : [
		'CldtConstants'
	],
	#category : 'KesMemoryUsage'
}

{ #category : 'KES-Internal' }
KesMemoryConsumptionView class >> filterString [

	(FilterString isNil) ifTrue: [FilterString := '*'].

	^FilterString
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView class >> filterString: aString [

	FilterString := aString kesAsExcludedObject
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView class >> IS_instanceInterfaceSpec [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for returning a featureSpec
	that describes the implementation of a particular feature of the receiver"

	^AbtInterfaceSpec new
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView class >> kesIncludeInInstanceCount [

	^false
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView class >> reset [

	FilterString := nil
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> abtBuildInternals [
	"Private - ** Warning ** This method is generated by VisualAge and should not
	be modified or deleted. This method is responsible for initializing the receiver by
	creating all the subparts and connections specified in the Composition Editor"

	| abtSeparatedConstants window classColumn size1Column size2Column deltaColumn count1Column
	 count2Column deltaCountColumn takeMeasurementButton findButton abtCwMenuView
	 measurementsMenuBarItem resultsMenuBarItem measurementMenu takeMeasurementChoice
	 renameMeasurementChoice includeMeasurementsChoice writeResultsToWorkspaceChoice sepMM1
	 deleteMeasurementChoice deleteAllMeasurementsChoice sepMM2 ggcChoice scrubImageChoice
	 measurementLabelPrompter resultsMenu browseHierarchy inspectInstance inspectInstances
	 inspectReferences sepRM1 cutReferences nilInstances globalEventsSubmenu sepRM2
	 copyResultsToClipboard recordInstancesChoice inspectInstanceRecordingChoice
	 inspectInstancesDeltaRecordingChoice sepRM3 filterResultsChoice unfilterAllChoice
	 filterMeasurementsPrompter findClassInResultsListPrompter filterResultsListPrompter
	 globalEventsDependentsMenu inspectGlobalEvents inspectGlobalEventsReceivers
	 setGlobalEventsDependentsToNil scrubImageConfirmation renameMeasurementPrompter conn0 conn1 conn3
	 conn4 conn6 conn7 conn8 conn9 conn10 conn22 conn13 conn14 conn24 conn15 conn26 conn17 conn18 conn19
	 conn20 conn21 conn32 conn23 conn34 conn25 conn27 conn28 conn29 conn31 conn52 conn33 conn44 conn46
	 conn36 conn48 conn39 conn40 conn50 conn41 conn62 conn43 conn54 conn56 conn47 conn58 conn49 conn59
	 conn60 conn69 conn70 conn80 conn51 conn72 conn53 conn64 conn55 conn65 conn66 conn57 conn68 conn79
	 conn90 conn61 conn82 conn63 |
	abtSeparatedConstants := self class abtSeparatedConstants.
	window := AbtShellView abtCreatePart: 'Window' parent: nil owner: self .
	measureList := AbtMultipleSelectListView abtCreatePart: 'measureList' parent: window.
	resultsContainer := AbtContainerDetailsView abtCreatePart: 'resultsContainer' parent: window.
	classColumn := AbtContainerDetailsColumn abtCreatePart: 'classColumn' parent: resultsContainer.
	size1Column := AbtContainerDetailsColumn abtCreatePart: 'size1Column' parent: resultsContainer.
	size2Column := AbtContainerDetailsColumn abtCreatePart: 'size2Column' parent: resultsContainer.
	deltaColumn := AbtContainerDetailsColumn abtCreatePart: 'deltaColumn' parent: resultsContainer.
	count1Column := AbtContainerDetailsColumn abtCreatePart: 'count1Column' parent: resultsContainer.
	count2Column := AbtContainerDetailsColumn abtCreatePart: 'count2Column' parent: resultsContainer.
	deltaCountColumn := AbtContainerDetailsColumn abtCreatePart: 'deltaCountColumn' parent: resultsContainer.
	takeMeasurementButton := AbtPushButtonView abtCreatePart: 'takeMeasurementButton' parent: window.
	findButton := AbtPushButtonView abtCreatePart: 'findButton' parent: window.
	findNextButton := AbtPushButtonView abtCreatePart: 'findNextButton' parent: window.
	statusLine := AbtLabelView abtCreatePart: 'statusLine' parent: window.
	measurementMenu := AbtCwMenuView abtCreatePart: 'measurementMenu' parent: self parentVisual owner: self .
	takeMeasurementChoice := AbtPushButtonView abtCreatePart: 'takeMeasurementChoice' parent: measurementMenu.
	renameMeasurementChoice := AbtPushButtonView abtCreatePart: 'renameMeasurementChoice' parent: measurementMenu.
	includeMeasurementsChoice := AbtPushButtonView abtCreatePart: 'includeMeasurementsChoice' parent: measurementMenu.
	startAutoMeasurementChoice := AbtPushButtonView abtCreatePart: 'startAutoMeasurementChoice' parent: measurementMenu.
	stopAutoMeasurementChoice := AbtPushButtonView abtCreatePart: 'stopAutoMeasurementChoice' parent: measurementMenu.
	writeResultsToWorkspaceChoice := AbtPushButtonView abtCreatePart: 'writeResultsToWorkspaceChoice' parent: measurementMenu.
	sepMM1 := AbtSeparatorView abtCreatePart: 'sepMM1' parent: measurementMenu.
	deleteMeasurementChoice := AbtPushButtonView abtCreatePart: 'deleteMeasurementChoice' parent: measurementMenu.
	deleteAllMeasurementsChoice := AbtPushButtonView abtCreatePart: 'deleteAllMeasurementsChoice' parent: measurementMenu.
	sepMM2 := AbtSeparatorView abtCreatePart: 'sepMM2' parent: measurementMenu.
	ggcChoice := AbtPushButtonView abtCreatePart: 'ggcChoice' parent: measurementMenu.
	scrubImageChoice := AbtPushButtonView abtCreatePart: 'scrubImageChoice' parent: measurementMenu.
	autoMeasurementPrompter := AbtTextPrompter abtCreatePart: 'autoMeasurementPrompter' parent: self parentVisual owner: self .
	measurementLabelPrompter := AbtTextPrompter abtCreatePart: 'measurementLabelPrompter' parent: self parentVisual owner: self .
	resultsMenu := AbtCwMenuView abtCreatePart: 'resultsMenu' parent: self parentVisual owner: self .
	browseHierarchy := AbtPushButtonView abtCreatePart: 'browseHierarchy' parent: resultsMenu.
	inspectInstance := AbtPushButtonView abtCreatePart: 'inspectInstance' parent: resultsMenu.
	inspectInstances := AbtPushButtonView abtCreatePart: 'inspectInstances' parent: resultsMenu.
	inspectReferences := AbtPushButtonView abtCreatePart: 'inspectReferences' parent: resultsMenu.
	sepRM1 := AbtSeparatorView abtCreatePart: 'sepRM1' parent: resultsMenu.
	cutReferences := AbtPushButtonView abtCreatePart: 'cutReferences' parent: resultsMenu.
	nilInstances := AbtPushButtonView abtCreatePart: 'nilInstances' parent: resultsMenu.
	globalEventsSubmenu := AbtCascadeButtonView abtCreatePart: 'globalEventsSubmenu' parent: resultsMenu.
	sepRM2 := AbtSeparatorView abtCreatePart: 'sepRM2' parent: resultsMenu.
	copyResultsToClipboard := AbtPushButtonView abtCreatePart: 'copyResultsToClipboard' parent: resultsMenu.
	recordInstancesChoice := AbtPushButtonView abtCreatePart: 'recordInstancesChoice' parent: resultsMenu.
	inspectInstanceRecordingChoice := AbtPushButtonView abtCreatePart: 'inspectInstanceRecordingChoice' parent: resultsMenu.
	inspectInstancesDeltaRecordingChoice := AbtPushButtonView abtCreatePart: 'inspectInstancesDeltaRecordingChoice' parent: resultsMenu.
	sepRM3 := AbtSeparatorView abtCreatePart: 'sepRM3' parent: resultsMenu.
	filterResultsChoice := AbtPushButtonView abtCreatePart: 'filterResultsChoice' parent: resultsMenu.
	unfilterAllChoice := AbtPushButtonView abtCreatePart: 'unfilterAllChoice' parent: resultsMenu.
	filterMeasurementsPrompter := AbtTextPrompter abtCreatePart: 'filterMeasurementsPrompter' parent: self parentVisual owner: self .
	findClassInResultsListPrompter := AbtTextPrompter abtCreatePart: 'findClassInResultsListPrompter' parent: self parentVisual owner: self .
	filterResultsListPrompter := AbtTextPrompter abtCreatePart: 'filterResultsListPrompter' parent: self parentVisual owner: self .
	globalEventsDependentsMenu := AbtCwMenuView abtCreatePart: 'globalEventsDependentsMenu' parent: self parentVisual owner: self .
	inspectGlobalEvents := AbtPushButtonView abtCreatePart: 'inspectGlobalEvents' parent: globalEventsDependentsMenu.
	inspectGlobalEventsReceivers := AbtPushButtonView abtCreatePart: 'inspectGlobalEventsReceivers' parent: globalEventsDependentsMenu.
	setGlobalEventsDependentsToNil := AbtPushButtonView abtCreatePart: 'setGlobalEventsDependentsToNil' parent: globalEventsDependentsMenu.
	scrubImageConfirmation := AbtMessagePrompter abtCreatePart: 'scrubImageConfirmation' parent: self parentVisual owner: self .
	renameMeasurementPrompter := AbtTextPrompter abtCreatePart: 'renameMeasurementPrompter' parent: self parentVisual owner: self .
	self 
		 primaryPart: window.
	window 
		 title: (abtSeparatedConstants at: 1)          " 'Memory Consumption Monitor' " ;
		 buttonFontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtEdgeConstant new offsetIsPosition: true;  offset: 5);
			rightEdge: (AbtEdgeConstant new offsetIsPosition: true;  offset: 80);
			topEdge: (AbtEdgeConstant new offsetIsPosition: true;  offset: 5);
			bottomEdge: (AbtEdgeConstant new offsetIsPosition: true;  offset: 60));
		 textFontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 labelFontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 menu: ((abtCwMenuView := AbtCwMenuView abtCreatePart: #AbtCwMenuView parent:  nil )
			 abtReturnReceiver: (measurementsMenuBarItem := AbtCascadeButtonView abtCreatePart: 'measurementsMenuBarItem' parent: abtCwMenuView);
			 abtReturnReceiver: (resultsMenuBarItem := AbtCascadeButtonView abtCreatePart: 'resultsMenuBarItem' parent: abtCwMenuView);
			 rowColumnType: 1).
	measureList 
		 fontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 items: (OrderedCollection new
			 yourself);
		 attributeName: #displayString;
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHPOSITION; position: 30));
		 refreshEntireListOnChange: true.
	resultsContainer 
		 headingVisualStyle: 2;
		 headingFontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 showHorizontalScrollBar: true;
		 selectionPolicy: 2;
		 fontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 4; attachedTargetView: measureList);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 4; attachedTargetView: findButton));
		 editable: true.
	classColumn 
		 width: 250;
		 editable: false;
		 heading: (abtSeparatedConstants at: 2)          " 'Class' " .
	size1Column 
		 converter: nil;
		 width: 72;
		 verticalAlignment: 0;
		 editable: false;
		 heading: (abtSeparatedConstants at: 3)          " 'Bytes1' " ;
		 horizontalAlignment: 2;
		 horizontalHeadingAlignment: 1.
	size2Column 
		 converter: nil;
		 width: 72;
		 verticalAlignment: 0;
		 editable: false;
		 heading: (abtSeparatedConstants at: 4)          " 'Bytes2' " ;
		 horizontalAlignment: 2;
		 horizontalHeadingAlignment: 1.
	deltaColumn 
		 converter: nil;
		 width: 72;
		 editable: false;
		 heading: (abtSeparatedConstants at: 5)          " 'd Bytes' " ;
		 horizontalAlignment: 2;
		 horizontalHeadingAlignment: 1.
	count1Column 
		 converter: nil;
		 width: 72;
		 editable: false;
		 heading: (abtSeparatedConstants at: 6)          " 'Count1' " ;
		 horizontalAlignment: 2;
		 horizontalHeadingAlignment: 1.
	count2Column 
		 converter: nil;
		 width: 72;
		 editable: false;
		 heading: (abtSeparatedConstants at: 7)          " 'Count2' " ;
		 horizontalAlignment: 2;
		 horizontalHeadingAlignment: 1.
	deltaCountColumn 
		 converter: nil;
		 width: 72;
		 editable: false;
		 heading: (abtSeparatedConstants at: 8)          " 'd Count' " ;
		 horizontalAlignment: 2;
		 horizontalHeadingAlignment: 1.
	takeMeasurementButton 
		 showAsDefault: true;
		 object: (abtSeparatedConstants at: 9)          " 'Take Measurement' " ;
		 tabGroup: true;
		 mnemonic: (abtSeparatedConstants at: 10);
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 19);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 4; attachedTargetView: statusLine)).
	findButton 
		 object: (abtSeparatedConstants at: 11)          " 'Find...' " ;
		 tabGroup: true;
		 mnemonic: (abtSeparatedConstants at: 12);
		 accelerator: nil;
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 10; attachedTargetView: takeMeasurementButton);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 4; attachedTargetView: statusLine)).
	findNextButton 
		 object: (abtSeparatedConstants at: 13)          " 'Find Next' " ;
		 tabGroup: true;
		 mnemonic: (abtSeparatedConstants at: 14);
		 accelerator: nil;
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHWIDGET; offset: 10; attachedTargetView: findButton);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHOPPOSITEWIDGET; offset: 0; attachedTargetView: findButton)).
	statusLine 
		 object: (abtSeparatedConstants at: 15)          " 'Dan Kehn, Copyright (c), IBM Corporation 2000' " ;
		 alignment: 0;
		 fontName: '-*-ms sans serif-medium-r-*-sans serif-*-100-*-*-*-*-*-*';
		 framingSpec: (AbtViewAttachmentConstraint new
			leftEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			rightEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10);
			topEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHNONE);
			bottomEdge: (AbtRunEdgeAttachmentConstraint new attachment: XmATTACHFORM; offset: 10));
		 foregroundColor: 'navy'.
	measurementsMenuBarItem 
		 object: (abtSeparatedConstants at: 16)          " 'Measurements' " ;
		 mnemonic: (abtSeparatedConstants at: 17).
	resultsMenuBarItem 
		 object: (abtSeparatedConstants at: 18)          " 'Results' " ;
		 mnemonic: (abtSeparatedConstants at: 19).
	takeMeasurementChoice 
		 object: (abtSeparatedConstants at: 20)          " 'Take Measurement...' " ;
		 mnemonic: (abtSeparatedConstants at: 21).
	renameMeasurementChoice 
		 object: (abtSeparatedConstants at: 22)          " 'Rename...' " ;
		 mnemonic: (abtSeparatedConstants at: 23).
	includeMeasurementsChoice 
		 object: (abtSeparatedConstants at: 24)          " 'Include Classes...' " ;
		 mnemonic: (abtSeparatedConstants at: 25).
	startAutoMeasurementChoice 
		 object: (abtSeparatedConstants at: 26)          " 'Start Auto-Measurement...' " ;
		 mnemonic: (abtSeparatedConstants at: 27).
	stopAutoMeasurementChoice 
		 object: (abtSeparatedConstants at: 28)          " 'Stop Auto-Measurement' " ;
		 mnemonic: (abtSeparatedConstants at: 29);
		 accelerator: nil;
		 enabled: false.
	writeResultsToWorkspaceChoice 
		 object: (abtSeparatedConstants at: 30)          " 'Write Results to Workspace' " ;
		 mnemonic: (abtSeparatedConstants at: 31).
	deleteMeasurementChoice 
		 object: (abtSeparatedConstants at: 32)          " 'Remove' " ;
		 mnemonic: (abtSeparatedConstants at: 33).
	deleteAllMeasurementsChoice 
		 object: (abtSeparatedConstants at: 34)          " 'Remove All' " ;
		 mnemonic: (abtSeparatedConstants at: 35).
	ggcChoice 
		 object: (abtSeparatedConstants at: 36)          " 'Execute Global Garbage Collect' " .
	scrubImageChoice 
		 object: (abtSeparatedConstants at: 37)          " 'Clean Up Image...' " ;
		 mnemonic: (abtSeparatedConstants at: 38).
	autoMeasurementPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 39)          " '10' " ;
		 messageString: (abtSeparatedConstants at: 40)          " 'Enter the number of seconds between each measurement:' " ;
		 title: (abtSeparatedConstants at: 41)          " 'Auto-Measurement' " .
	measurementLabelPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 42)          " '<untitled>' " ;
		 messageString: (abtSeparatedConstants at: 43)          " 'Enter desired title for the measurement:' " ;
		 title: (abtSeparatedConstants at: 44)          " 'Measurement Title' " .
	browseHierarchy 
		 object: (abtSeparatedConstants at: 45)          " 'Browse Hierarchy' " ;
		 mnemonic: (abtSeparatedConstants at: 46).
	inspectInstance 
		 object: (abtSeparatedConstants at: 47)          " 'Inspect' " ;
		 mnemonic: (abtSeparatedConstants at: 48).
	inspectInstances 
		 object: (abtSeparatedConstants at: 49)          " 'Inspect Instances' " ;
		 mnemonic: (abtSeparatedConstants at: 50).
	inspectReferences 
		 object: (abtSeparatedConstants at: 51)          " 'Inspect References' " ;
		 mnemonic: (abtSeparatedConstants at: 52).
	cutReferences 
		 object: (abtSeparatedConstants at: 53)          " 'Cut References to Others' " ;
		 mnemonic: (abtSeparatedConstants at: 54).
	nilInstances 
		 object: (abtSeparatedConstants at: 55)          " 'Nil Instances' " ;
		 mnemonic: (abtSeparatedConstants at: 56).
	globalEventsSubmenu 
		 object: (abtSeparatedConstants at: 57)          " 'Global Event Dependents' " ;
		 mnemonic: (abtSeparatedConstants at: 58).
	copyResultsToClipboard 
		 object: (abtSeparatedConstants at: 59)          " 'Copy Selection to Clipboard' " ;
		 mnemonic: (abtSeparatedConstants at: 60).
	recordInstancesChoice 
		 object: (abtSeparatedConstants at: 61)          " 'Record Instances' " ;
		 mnemonic: (abtSeparatedConstants at: 62).
	inspectInstanceRecordingChoice 
		 object: (abtSeparatedConstants at: 63)          " 'Inspect Recording' " ;
		 mnemonic: (abtSeparatedConstants at: 64).
	inspectInstancesDeltaRecordingChoice 
		 object: (abtSeparatedConstants at: 65)          " 'Inspect Recording Intersection' " ;
		 mnemonic: (abtSeparatedConstants at: 66).
	filterResultsChoice 
		 object: (abtSeparatedConstants at: 67)          " 'Filter Displayed Results...' " ;
		 mnemonic: (abtSeparatedConstants at: 68).
	unfilterAllChoice 
		 object: (abtSeparatedConstants at: 69)          " 'Show All' " ;
		 mnemonic: (abtSeparatedConstants at: 70).
	filterMeasurementsPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 71)          " '*' " ;
		 messageString: (abtSeparatedConstants at: 72)          " 'Enter one or more patterns to match with class name (* = all):' " ;
		 title: (abtSeparatedConstants at: 73)          " 'Include Classes in Subsequent Measurements' " .
	findClassInResultsListPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 74)          " '*' " ;
		 messageString: (abtSeparatedConstants at: 75)          " 'Enter one or more patterns to match with class name:' " ;
		 title: (abtSeparatedConstants at: 76)          " 'Find Class' " .
	filterResultsListPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 77)          " '*' " ;
		 messageString: (abtSeparatedConstants at: 78)          " 'Enter one or more patterns to match with class name (* = all):' " ;
		 title: (abtSeparatedConstants at: 79)          " 'Filter Results' " .
	inspectGlobalEvents 
		 object: (abtSeparatedConstants at: 80)          " 'Inspect' " ;
		 mnemonic: (abtSeparatedConstants at: 81).
	inspectGlobalEventsReceivers 
		 object: (abtSeparatedConstants at: 82)          " 'Inspect Receivers' " ;
		 mnemonic: (abtSeparatedConstants at: 83).
	setGlobalEventsDependentsToNil 
		 object: (abtSeparatedConstants at: 84)          " 'Set to nil' " ;
		 mnemonic: (abtSeparatedConstants at: 85).
	scrubImageConfirmation 
		 buttonType: 5;
		 iconType: 4;
		 defaultButtonType: 2;
		 messageString: (abtSeparatedConstants at: 86)          " 'This operation removes all event dependencies, closes all windows, and terminates all processes.  Do you want to continue?' " ;
		 title: (abtSeparatedConstants at: 87)          " 'Clean Up Image' " .
	renameMeasurementPrompter 
		 defaultAnswerString: (abtSeparatedConstants at: 88)          " '<untitled>' " ;
		 messageString: (abtSeparatedConstants at: 89)          " 'Enter desired title for the measurement:' " ;
		 title: (abtSeparatedConstants at: 90)          " 'Rename Measurement' " .
	self attributeConnections add: (conn0 := AbtAttributeToAttributeConnection new
		connectSource: measurementMenu
		featureName: #self
		feature: AbtCwMenuView IS_self
		toTarget: measureList
		featureName: #menu
		feature: AbtMultipleSelectListView IS_menu).
	self attributeConnections add: (conn1 := AbtAttributeToAttributeConnection new
		connectSource: deleteAllMeasurementsChoice
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled
		toTarget: measureList
		featureName: #selectionIsValid
		feature: AbtMultipleSelectListView IS_selectionIsValid).
	deleteMeasurementChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #deleteMeasurement;
				arguments: #()).
	measureList
		abtWhenPrimitive: #selectedItemsChanged
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #selectedMeasurementsChanged:;
				arguments: (Array new: 1)).
	classColumn
		abtWhenPrimitive: #cellValueRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #resultsContainerClassCellValueRequested:;
				arguments: (Array new: 1)).
	size1Column
		abtWhenPrimitive: #cellValueRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #resultsContainerSize1CellValueRequested:;
				arguments: (Array new: 1)).
	size2Column
		abtWhenPrimitive: #cellValueRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #resultsContainerSize2CellValueRequested:;
				arguments: (Array new: 1)).
	deltaColumn
		abtWhenPrimitive: #cellValueRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #resultsContainerDeltaCellValueRequested:;
				arguments: (Array new: 1)).
	stopAutoMeasurementChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #stopAutoMeasurement;
				arguments: #()).
	startAutoMeasurementChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: autoMeasurementPrompter;
				selector: #prompt;
				arguments: #()).
	autoMeasurementPrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #startAutoMeasurement;
				arguments: #()).
	writeResultsToWorkspaceChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #writeResultsToWorkspace;
				arguments: #()).
	conn24 := AbtEventToCodeHookConnection new
		connectSource: window
		featureName: #openedWidget
		feature: AbtShellView IS_openedWidget;
		receiver: self selector: #takeMeasurement: selectorArgumentCount: 1.
	measurementLabelPrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #takeMeasurement:;
				arguments: (Array new: 1)).
	takeMeasurementChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: measurementLabelPrompter;
				selector: #prompt;
				arguments: #()).
	self attributeConnections add: (conn17 := AbtAttributeToAttributeConnection new
		connectSource: writeResultsToWorkspaceChoice
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled
		toTarget: measureList
		featureName: #selectionIsValid
		feature: AbtMultipleSelectListView IS_selectionIsValid).
	count1Column
		abtWhenPrimitive: #cellValueRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #resultsContainerCount1CellValueRequested:;
				arguments: (Array new: 1)).
	count2Column
		abtWhenPrimitive: #cellValueRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #resultsContainerCount2CellValueRequested:;
				arguments: (Array new: 1)).
	deltaCountColumn
		abtWhenPrimitive: #cellValueRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #resultsContainerDeltaCountCellValueRequested:;
				arguments: (Array new: 1)).
	self attributeConnections add: (conn21 := AbtAttributeToAttributeConnection new
		connectSource: browseHierarchy
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled
		toTarget: resultsContainer
		featureName: #selectionIsValid
		feature: AbtContainerDetailsView IS_selectionIsValid).
	browseHierarchy
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #browseClass;
				arguments: #()).
	self attributeConnections add: (conn23 := AbtAttributeToAttributeConnection new
		connectSource: resultsContainer
		featureName: #menu
		feature: AbtContainerDetailsView IS_menu
		toTarget: resultsMenu
		featureName: #self
		feature: AbtCwMenuView IS_self).
	inspectInstances
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #inspectInstances;
				arguments: #()).
	self attributeConnections add: (conn25 := AbtAttributeToAttributeConnection new
		connectSource: resultsContainer
		featureName: #selectionIsValid
		feature: AbtContainerDetailsView IS_selectionIsValid
		toTarget: inspectInstances
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled).
	self attributeConnections add: (conn27 := AbtAttributeToAttributeConnection new
		connectSource: inspectInstanceRecordingChoice
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled
		toTarget: measureList
		featureName: #selectionIsValid
		feature: AbtMultipleSelectListView IS_selectionIsValid).
	recordInstancesChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #recordInstances;
				arguments: #()).
	resultsContainer
		abtWhenPrimitive: #popUpMenuRequest
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #resultsContainerPopUpRequested;
				arguments: #()).
	filterMeasurementsPrompter
		abtWhenPrimitive: #ok
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #filterMeasurements:;
				arguments: (Array new: 1)).
	includeMeasurementsChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #promptForFilterMeasurements;
				arguments: #()).
	inspectInstanceRecordingChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #inspectAllRecordedInstances;
				arguments: #()).
	inspectInstancesDeltaRecordingChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #inspectDeltaInstanceRecording;
				arguments: #()).
	findButton
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #promptForFindClassInResultsList;
				arguments: #()).
	self attributeConnections add: (conn36 := AbtAttributeToAttributeConnection new
		connectSource: findButton
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled
		toTarget: measureList
		featureName: #selectionIsValid
		feature: AbtMultipleSelectListView IS_selectionIsValid).
	findNextButton
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #findAgainClassInResultsList;
				arguments: #()).
	filterResultsChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #promptForFilterResultsList;
				arguments: #()).
	unfilterAllChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #unfilterResultsList;
				arguments: #()).
	self attributeConnections add: (conn50 := AbtAttributeToAttributeConnection new
		connectSource: resultsContainer
		featureName: #selectionIsValid
		feature: AbtContainerDetailsView IS_selectionIsValid
		toTarget: nilInstances
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled).
	nilInstances
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #nilInstances;
				arguments: #()).
	self attributeConnections add: (conn62 := AbtAttributeToAttributeConnection new
		connectSource: resultsContainer
		featureName: #selectionIsValid
		feature: AbtContainerDetailsView IS_selectionIsValid
		toTarget: inspectReferences
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled).
	inspectReferences
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #inspectReferences;
				arguments: #()).
	cutReferences
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #releaseInstancesWithImpunity;
				arguments: #()).
	self attributeConnections add: (conn56 := AbtAttributeToAttributeConnection new
		connectSource: globalEventsDependentsMenu
		featureName: #self
		feature: AbtCwMenuView IS_self
		toTarget: globalEventsSubmenu
		featureName: #menu
		feature: AbtCascadeButtonView IS_menu).
	inspectGlobalEvents
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #inspectGlobalEventDependents;
				arguments: #()).
	setGlobalEventsDependentsToNil
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #reinitializeGlobalEventDependents;
				arguments: #()).
	resultsContainer
		abtWhenPrimitive: #defaultActionRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #inspectInstance;
				arguments: #()).
	inspectGlobalEventsReceivers
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #inspectGlobalEventDependentReceivers;
				arguments: #()).
	deleteAllMeasurementsChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #deleteAllMeasurements;
				arguments: #()).
	takeMeasurementButton
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #takeMeasurement:;
				arguments: (Array new: 1)).
	self
		abtWhen: #aboutToCloseWidget
		selector: #IS_aboutToCloseWidget
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #closingView;
				arguments: #()).
	scrubImageChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: scrubImageConfirmation;
				selector: #prompt;
				arguments: #()).
	scrubImageConfirmation
		abtWhenPrimitive: #okYesRetry
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #abtScrubImage;
				arguments: #()).
	self attributeConnections add: (conn72 := AbtAttributeToAttributeConnection new
		connectSource: resultsContainer
		featureName: #selectionIsValid
		feature: AbtContainerDetailsView IS_selectionIsValid
		toTarget: copyResultsToClipboard
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled).
	copyResultsToClipboard
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #copySelectedResultsToClipboard;
				arguments: #()).
	self attributeConnections add: (conn64 := AbtAttributeToAttributeConnection new
		connectSource: resultsContainer
		featureName: #selectionIsValid
		feature: AbtContainerDetailsView IS_selectionIsValid
		toTarget: cutReferences
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled).
	self attributeConnections add: (conn55 := AbtAttributeToAttributeConnection new
		connectSource: measureList
		featureName: #selectionIsValid
		feature: AbtMultipleSelectListView IS_selectionIsValid
		toTarget: deleteMeasurementChoice
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled).
	self attributeConnections add: (conn65 := AbtAttributeToAttributeConnection new
		connectSource: findButton
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled
		toTarget: findNextButton
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled).
	inspectInstance
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #inspectInstance;
				arguments: #()).
	self attributeConnections add: (conn57 := AbtAttributeToAttributeConnection new
		connectSource: resultsContainer
		featureName: #selectionIsValid
		feature: AbtContainerDetailsView IS_selectionIsValid
		toTarget: inspectInstance
		featureName: #enabled
		feature: AbtPushButtonView IS_enabled).
	self attributeConnections add: (conn68 := AbtAttributeToAttributeConnection new
		connectSource: measurementMenu
		featureName: #self
		feature: AbtCwMenuView IS_self
		toTarget: measurementsMenuBarItem
		featureName: #menu
		feature: AbtCascadeButtonView IS_menu).
	self attributeConnections add: (conn79 := AbtAttributeToAttributeConnection new
		connectSource: resultsMenu
		featureName: #self
		feature: AbtCwMenuView IS_self
		toTarget: resultsMenuBarItem
		featureName: #menu
		feature: AbtCascadeButtonView IS_menu).
	resultsMenuBarItem
		abtWhenPrimitive: #menuCascaded
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #resultsContainerPopUpRequested;
				arguments: #()).
	renameMeasurementChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #promptForRenameMeasurement;
				arguments: #()).
	ggcChoice
		abtWhenPrimitive: #clicked
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #globalGarbageCollect;
				arguments: #()).
	resultsContainer
		abtWhenPrimitive: #drawBackgroundRequested
		perform: 
			(DirectedMessage new 
				receiver: self;
				selector: #drawResultsBackgroundRequested:;
				arguments: (Array new: 1)).
	conn24 
		 valueOfAttributeNamed: #parameter1 selector: #IS_parameter1 ifAbsent: [] put: (abtSeparatedConstants at: 91)          " '<initial>' " .
	self initializeAttributeConnections.
	self finalInitialize.

]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> abtScrubImage [

	Object abtFlushInterfaceSpecCache.

	System
		abtPrimScrubImage: true
		protected: ([self class new openWidget] forkAt: Processor userBackgroundPriority)
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> browseClass [

	resultsContainer selectedItems first browseClass
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> calculateResults: aMeasures [

	| sortedResults changedResults unchangedResults 
		classNames results1 results2 deltaSize deltaCount newResults |

	deltaSize := 0.
	deltaCount := 0.

	(aMeasures size == 2) ifTrue: [
		results1 := (aMeasures at: 1) filteredResultsByClassName: self filterString.
		results2 := (aMeasures at: 2) filteredResultsByClassName: self filterString.

		classNames := OrderedCollection new.
		((aMeasures at: 1) filteredResults: self filterString)  do: [:result| classNames add: result className].
		((aMeasures at: 2) filteredResults: self filterString)  do: [:result| 
			(classNames includes: result className) ifFalse: [classNames add: result className]].

		sortedResults := classNames collect: [:className|
			(KesClassMemoryConsumptionDelta 
				with: (results1 at: className ifAbsent: [KesClassMemoryConsumption className: className]) 
				with: (results2 at: className ifAbsent: [KesClassMemoryConsumption className: className]))].
		sortedResults := sortedResults
			asSortedCollection: [:a :b| 
				(a deltaTotalCount < 0 and: [b deltaTotalCount < 0])
					ifTrue: [a deltaTotalCount abs > b deltaTotalCount abs]
					ifFalse: [a deltaTotalCount > b deltaTotalCount]].

		changedResults := OrderedCollection new.
		unchangedResults := OrderedCollection new.
		sortedResults do: [:each| 
			(each deltaTotalSize == 0) 
				ifTrue: [unchangedResults add: each]
				ifFalse: [changedResults add: each]].
		newResults := changedResults.

		newResults do: [:each| 
			deltaSize := deltaSize + each deltaTotalSize.
			deltaCount := deltaCount + each deltaTotalCount]]
	ifFalse: [
			(aMeasures size == 1) ifTrue: [
				newResults := ((aMeasures at: 1) filteredResults: self filterString) collect: [:result|
						(KesClassMemoryConsumptionDelta with: result)].
				newResults do: [:each| 
					deltaSize := deltaSize + each totalSize.
					deltaCount := deltaCount + each totalCount]]
			ifFalse: [
				newResults := #()]].

	^(Array with: newResults with: deltaSize with: deltaCount) kesAsExcludedObject
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> closingView [

	KesAnalysisIntervalTester stop
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> copySelectedResultsToClipboard [

	| stream |

	System showBusyCursorWhile: [
		stream := WriteStream on: String new.
		resultsContainer selectedItems do: [:item |
			stream
				nextPutAll: item asDisplayString;
				cr].
		self copyStringToClipboard: stream contents]


]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> copyStringToClipboard: aString [

	"Private - Copy aString to the clipboard.
	 Answer whether it was successful."

	| theDisplay theWindow itemIdHolder |
	theDisplay := self shell display.
	theWindow := self shell window.
	itemIdHolder := ReturnParameter new.
	ClipboardSuccess =
		(theDisplay clipboardStartCopy: theWindow clipLabel: self title itemIdReturn: itemIdHolder)
			ifFalse: [^false].

	theDisplay
		clipboardCopy: theWindow
		itemId: itemIdHolder value
		formatName: 'STRING'	"$NON-NLS$"
		buffer: aString
		privateId: 0.

	^ClipboardSuccess = (theDisplay clipboardEndCopy: theWindow itemId: itemIdHolder value)
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> deleteAllMeasurements [

	measures := OrderedCollection new kesAsExcludedObject.
	self updateMeasuresList.
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> deleteMeasurement [

	| coll selectionIndices |

	coll := OrderedCollection new.
	selectionIndices := measureList selectionIndices.
	1 to: measures size do: [:i| 
		(selectionIndices includes: i) ifFalse: [coll add: (measures at: i)]].
	measures := coll kesAsExcludedObject.

	self updateMeasuresList.
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> drawResultsBackgroundRequested: anEwTableListDrawBackgroundCallbackData [

	| rc pixel |

	(anEwTableListDrawBackgroundCallbackData item notNil and: [
		anEwTableListDrawBackgroundCallbackData columnPosition = 4
			or: [anEwTableListDrawBackgroundCallbackData columnPosition = 7]])
		ifTrue: [
				rc := anEwTableListDrawBackgroundCallbackData renderContext.
				pixel := self widget window getPalette nearestPixelValue: (CgRGBColor red: 16rBFBF green: 16rBFBF blue: 16rBFBF).

				(pixel = rc drawable blackPixel)
					ifFalse: [
						rc setForeground: pixel.
						rc drawable fillRectangle: rc gc x: rc x y: rc y width: rc width height: rc height.
						anEwTableListDrawBackgroundCallbackData doit: true]]
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> filterMeasurements: aString [

	KesInstanceCountFilter current matchPattern: aString kesAsExcludedObject
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> filterString [

	^self class filterString
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> filterString: aString [

	^self class filterString: aString
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> finalInitialize [

	measurementNumber := 0.
	measures := OrderedCollection new.
	results := OrderedCollection new.
	resultsContainer refreshEntireListOnChange: true.
	self findString: '*'.

	System isRuntime
		ifTrue: [
			#('browseHierarchy' 'inspectInstance' 'inspectInstances' 'inspectReferences' 'sepRM1'
				'recordInstancesChoice' 'inspectInstanceRecordingChoice' 'inspectInstancesDeltaRecordingChoice'
				'inspectGlobalEvents' 'inspectGlobalEventsReceivers' 'writeResultsToWorkspaceChoice'
				'scrubImageChoice' 'sepMM2')
			do: [:subpartName|
					| pp |
					pp := (self subpartNamed: subpartName) parentPart.
					(self subpartNamed: subpartName) destroyPart.
					pp removeSubpartNamed: subpartName ifAbsent: []]]
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> findAgainClassInResultsList [

	(resultsContainer selectedItems isEmpty) 
		ifTrue: [self findClassInResultsList: self findString startingFrom: 1]
		ifFalse: [
			self
				findClassInResultsList: self findString
				startingFrom: ((resultsContainer items indexOf: resultsContainer selectedItems first) + 1
						min: resultsContainer items size)]
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> findClassInResultsList: aString startingFrom: startIndex [
	| matches names resultItems |
	
	(startIndex > 1)
		ifTrue: [
			resultItems := 
				resultsContainer items 
					copyFrom: startIndex
					to: resultsContainer items size]
		ifFalse: [resultItems := resultsContainer items].

	names := aString subStrings collect: [:str| (str includes: $*) ifTrue: [str] ifFalse: [str, '*']].
	matches := resultItems select: [:each|
		(names detect: [:name| name match: each className] ifNone: [nil]) notNil].

	matches notEmpty
		ifTrue: [
				resultsContainer 
					selectedItems: matches;
					setTopItem: matches first]
		ifFalse: [System message: 'No matches were found.']
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> findString [

	^findString
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> findString: aString [

	^findString := aString kesAsExcludedObject
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> globalGarbageCollect [

	self globalGarbageCollect: []
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> globalGarbageCollect: block [

	[
		(Delay forMilliseconds: 500) wait.
		[Processor finalizeCycle]
			whileTrue: [].  
		System globalGarbageCollect.

		CwAppContext default syncExecInUI: [
			System abtShowBusyCursorWhile: [block value]]
	] forkAt: Processor userBackgroundPriority.

	System abtShowBusyCursorWhile: [System globalGarbageCollect]
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> inspectAllRecordedInstances [

	resultsContainer selectedItems first inspectAllRecordedInstances
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> inspectDeltaInstanceRecording [

	| inst1 inst2 |

	inst1 := (EsIdentitySet new)
		addAll: resultsContainer selectedItems first memoryUse1 instances;
		yourself.
	inst2 := (EsIdentitySet new)
		addAll: resultsContainer selectedItems last memoryUse1 instances;
		yourself.
	inst1 do: [:each| inst2 remove: each ifAbsent: []].
	inst2 do: [:each| inst1 remove: each ifAbsent: []].

	(KesInstances instances: (inst1 addAll: inst2; yourself) asArray) kesInspect.
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> inspectGlobalEventDependentReceivers [

	| receivers |

	[Processor finalizeCycle]
		whileTrue: [].

	receivers := Set new.
	AbtCLDTAdditions kesGlobalEventDependents values do: [:table |
		table values
			do: [:coll | receivers addAll: (coll kesEventDependents collect: [:ed | ed receiver])]].

	^(receivers asSortedCollection: [:a :b| a printString < b printString]) asArray kesAsExcludedObject kesInspect
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> inspectGlobalEventDependents [

	[Processor finalizeCycle] whileTrue: [].  

	^AbtCLDTAdditions kesGlobalEventDependents kesInspect
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> inspectInstance [

	resultsContainer selectedItems isEmpty
		ifTrue: [^self].

	System showBusyCursorWhile: [
		| cls instances |
		cls := resultsContainer selectedItems first className asClass.
		(instances := cls kesAllInstances) notEmpty
			ifTrue: [instances first kesInspect]]
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> inspectInstances [

	System showBusyCursorWhile: [resultsContainer selectedItems first inspectAllInstances]
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> inspectReferences [

	System showBusyCursorWhile: [
		| references instances info |
		info := resultsContainer selectedItems first.
		instances := info allInstances.
		instances isEmpty
			ifTrue: [
				System message: ('There are no instances of %1 in the image.' bindWith: info className)]
			ifFalse: [
				(references := instances first kesBasicAllReferences) notEmpty
					ifTrue: [references kesInspect]]]
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> kesWarningNotAvailableInRuntimeImage [

	^super kesWarningNotAvailableInRuntimeImage
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> measurementNumber [

	measurementNumber := measurementNumber + 1.

	^measurementNumber
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> nilInstances [

	resultsContainer selectedItems do: [:memUse|
		memUse allInstances do: [:obj| obj kesBecomeNil]].

	System globalGarbageCollect
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> promptForFilterMeasurements [

	(self subpartNamed: 'filterMeasurementsPrompter') 
		defaultAnswerString: (KesInstanceCountFilter current matchPattern inject: String new into: [:resp :pattern| pattern, ' ', resp]) trimBlanks;
		prompt
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> promptForFilterResultsList [
	| answer |

	answer := (self subpartNamed: 'filterResultsListPrompter') 
		defaultAnswerString: self filterString;
		prompt.
	(answer notNil)
		ifTrue: [
			self filterString: answer.
			self updateResultsContainer].
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> promptForFindClassInResultsList [
	| answer |

	answer := (self subpartNamed: 'findClassInResultsListPrompter') 
		defaultAnswerString: self findString;
		prompt.
	(answer notNil)
		ifTrue: [
			findNextButton labelString: ('Find Next ''', answer, '''') kesAsExcludedObject.
			self findClassInResultsList: (self findString: answer) startingFrom: 1].
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> promptForRenameMeasurement [

	| answer |

	answer := (self subpartNamed: 'renameMeasurementPrompter') 
		defaultAnswerString: measureList selectedItems first label;
		prompt.
	(answer notNil)
		ifTrue: [
			measureList selectedItems first label: answer.
			measureList items: measureList items copy]
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> recordInstances [

	resultsContainer selectedItems first recordAllInstances.
	resultsContainer refreshItem: resultsContainer selectedItems first
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> reinitializeGlobalEventDependents [

	((System confirm: 'Are you sure?') == true)
		ifTrue: [AbtCLDTAdditions reinitializeEventDependents]
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> releaseInstancesWithImpunity [

	System abtShowBusyCursorWhile: [
		resultsContainer selectedItems
			do: [:memUse | memUse basicAllInstances do: [:obj | obj kesProcessReleaseWithImpunity]].
		System globalGarbageCollect]
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> resultsContainerClassCellValueRequested: aRequest [

	aRequest value: aRequest item className, (aRequest item hasRecordedInstances ifTrue: [' (R)'] ifFalse: [''])
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> resultsContainerCount1CellValueRequested: aRequest [

	(aRequest item memoryUse1) notNil 
		ifTrue: [aRequest value: aRequest item memoryUse1 totalCount kesLocalePrintString].
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> resultsContainerCount2CellValueRequested: aRequest [

	(aRequest item memoryUse2) notNil 
		ifTrue: [aRequest value: aRequest item memoryUse2 totalCount kesLocalePrintString].
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> resultsContainerDeltaCellValueRequested: aRequest [

	| deltaTotalSize |

	deltaTotalSize := aRequest item deltaTotalSize.
	(deltaTotalSize == 0) ifFalse: [
		aRequest value: deltaTotalSize kesLocalePrintString]
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> resultsContainerDeltaCountCellValueRequested: aRequest [

	| deltaTotalCount |

	deltaTotalCount := aRequest item deltaTotalCount.
	(deltaTotalCount == 0) ifFalse: [
		aRequest value: deltaTotalCount kesLocalePrintString]
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> resultsContainerPopUpRequested [

	System isRuntime
		ifFalse: [
			(self subpartNamed: 'recordInstancesChoice') enabled: 
				(measureList selectedItems size = 1
					and: [resultsContainer selectedItems size = 1
					and: [resultsContainer selectedItems first memoryUse1 hasRecordedInstances not]]).
			(self subpartNamed: 'inspectInstanceRecordingChoice') enabled: 
				((resultsContainer selectedItems size = 1)
					and: [resultsContainer selectedItems first memoryUse1 hasRecordedInstances]).
			(self subpartNamed: 'inspectInstancesDeltaRecordingChoice') enabled: 
				(((measureList selectedItems size = 2 
					and: [resultsContainer selectedItems size = 1])
					and: [resultsContainer selectedItems first memoryUse1 hasRecordedInstances])
					and: [resultsContainer selectedItems first memoryUse2 hasRecordedInstances])].

	(self subpartNamed: 'unfilterAllChoice') enabled: (self filterString = '*') not
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> resultsContainerSize1CellValueRequested: aRequest [

	(aRequest item memoryUse1) notNil 
		ifTrue: [aRequest value: aRequest item memoryUse1 totalSize kesLocalePrintString].
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> resultsContainerSize2CellValueRequested: aRequest [

	(aRequest item memoryUse2) notNil 
		ifTrue: [aRequest value: aRequest item memoryUse2 totalSize kesLocalePrintString].
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> selectedMeasurementsChanged: aSelection [

	self updateResultsContainer: aSelection.

]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> startAutoMeasurement [

	autoMeasureTest := (KesAnalysisBlockTest new) 
		block: [self takeMeasurement: '<auto', self measurementNumber printString, '>'];
		intervalSeconds: (autoMeasurementPrompter answerString asNumber max: 1);
		start.
	startAutoMeasurementChoice enabled: false.	
	stopAutoMeasurementChoice enabled: true.	
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> stopAutoMeasurement [

	(autoMeasureTest notNil) ifTrue: [
		autoMeasureTest stop.
		autoMeasureTest := nil].
	startAutoMeasurementChoice enabled: true.	
	stopAutoMeasurementChoice enabled: false.	
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> takeMeasurement: aString [

	self globalGarbageCollect: 
		[
			| measure title |

			aString isNil
				ifTrue: [title := '<untitled', self measurementNumber printString, '>']
				ifFalse: [title := aString].

			measureList selectedItems: nil.
			measures add: (measure := KesMemoryConsumptionMeasure takeMeasurement: title).
			measureList widget deferRedraw: [
				self updateMeasuresList.
				measureList
					selectedItems: (OrderedCollection with: measure) kesAsExcludedObject.
				measureList widget setPos: 0]
		]
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> unfilterResultsList [

	self filterString: '*'.
	self updateResultsContainer.
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> updateMeasuresList [

	measureList items: measures kesAsExcludedObject.
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> updateResultsContainer [

	self updateResultsContainer: measureList selectedItems
]

{ #category : 'KES-Internal',
  #vaVisibility : 'private' }
KesMemoryConsumptionView >> updateResultsContainer: aMeasures [

	| calculatedResults notes |

	(self filterString = '*')
		ifTrue: [notes := '']
		ifFalse: [notes := ', Filter: ''', self filterString, ''''].

	calculatedResults := self calculateResults: aMeasures.
	results := calculatedResults at: 1.

	(aMeasures size == 2) ifTrue: [
		statusLine labelString: 
			('Total delta size: ', (calculatedResults at: 2) kesLocalePrintString, 
			' bytes, Total delta count: ', (calculatedResults at: 3) kesLocalePrintString, notes) kesAsExcludedObject]
	ifFalse: [
			(aMeasures size == 1) ifTrue: [
				statusLine labelString: 
					('Total size: ', (calculatedResults at: 2) kesLocalePrintString, 
					' bytes, Total count: ', (calculatedResults at: 3) kesLocalePrintString, notes) kesAsExcludedObject]
			ifFalse: [
				results := #().
				statusLine labelString: 'Copyright (c), IBM Corporation, 2000', notes]].

	(self subpartNamed: 'renameMeasurementChoice') enabled: (aMeasures size = 1).

	resultsContainer 
		items: #();
		items: results kesAsExcludedObject.
]

{ #category : 'KES-Internal' }
KesMemoryConsumptionView >> writeResultsToWorkspace [

	| stream ws value deltaSize detailList newResultsList selectedMeasures |

	detailList := OrderedCollection new.
	selectedMeasures := measureList selectedItems asArray.
	(selectedMeasures size == 1)
		ifTrue: [detailList add: (Array with: (selectedMeasures at: 1))]
		ifFalse: [
			1 to: selectedMeasures size - 1 do: [:i|
				detailList add: 
					(Array with: (selectedMeasures at: i) with: (selectedMeasures at: i + 1))]].
	newResultsList := detailList collect: [:measureTuple|
		(self calculateResults: measureTuple)].

	stream := ReadWriteStream on: (String new: 4096).

	stream nextPutAll: '  Summary'; cr.
	measureList selectedItems asArray doWithIndex: [:measure :i| 
		stream nextPutAll: measure asShortDisplayString.
		(i == 1) ifFalse: [
			stream nextPutAll: ', delta = ', ((newResultsList at: (i - 1)) at: 2) kesLocalePrintString].
		stream cr].

	newResultsList doWithIndex: [:calculatedResults :i| 
		stream cr.
		(selectedMeasures size > 1) ifTrue: [
			stream nextPutAll: '  ''', (selectedMeasures at: i) asMinimumDisplayString, 
				''' -> ''', (selectedMeasures at: i + 1) asMinimumDisplayString, ''''; cr.
			stream nextPutAll: '  Delta = ', (calculatedResults at: 2) kesLocalePrintString; cr].
		stream nextPutAll: ('Class' abrPadWithBlanks: 40).
		stream nextPutAll: ('Size1' abtPadWith: Space upToLength: 10 onRight: false).
		stream nextPutAll: ('Size2' abtPadWith: Space upToLength: 10 onRight: false).
		stream nextPutAll: ('Delta' abtPadWith: Space upToLength: 10 onRight: false).
		stream cr.

		(calculatedResults at: 1) do: [:result|
			stream nextPutAll: (result className abrPadWithBlanks: 40).
			(result memoryUse1) notNil 
				ifTrue: [value := result memoryUse1 totalSize kesLocalePrintString]
				ifFalse: [value := ''].
			stream nextPutAll: (value abtPadWith: Space upToLength: 10 onRight: false).
			(result memoryUse2) notNil 
				ifTrue: [value := result memoryUse2 totalSize kesLocalePrintString]
				ifFalse: [value := ''].
			stream nextPutAll: (value abtPadWith: Space upToLength: 10 onRight: false).
			stream nextPutAll: (result deltaTotalSize kesLocalePrintString
				abtPadWith: Space upToLength: 10 onRight: false).
			stream cr]].

	ws := self openFixedFontWorkspace: (self subpartNamed: 'Window') title.
	CwAppContext default syncExecInUI: [
		ws revertToSaved. 
		ws changeContentsOf: ws textWidget to: stream contents].
 
]
